// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "router.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace router {
class UtilRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UtilRequest> {
} _UtilRequest_default_instance_;
class RouterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RouterRequest> {
} _RouterRequest_default_instance_;
class UtilDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Util> {
} _Util_default_instance_;
class UtilResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UtilResponse> {
} _UtilResponse_default_instance_;
class LookupResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LookupResponse> {
} _LookupResponse_default_instance_;

namespace protobuf_router_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilRequest, util_request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterRequest, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterRequest, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterRequest, util_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterRequest, last_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterRequest, resp_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterRequest, kill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterRequest, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterRequest, load_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Util, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Util, user_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Util, system_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Util, io_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Util, idle_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, util_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, lookup_srv_util_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, router_util_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, create_router_req_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, unpack_router_req_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, update_router_util_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, get_lookup_srv_responses_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, create_lookup_srv_req_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, unpack_lookup_srv_resp_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, unpack_lookup_srv_req_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, lookup_srv_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, pack_lookup_srv_resp_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, pack_router_resp_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, number_of_lookup_servers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, util_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, resp_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, router_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, start_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, end_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, num_inline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, num_workers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, num_resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, kill_ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, merge_time_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(UtilRequest)},
  { 5, -1, sizeof(RouterRequest)},
  { 18, -1, sizeof(Util)},
  { 26, -1, sizeof(UtilResponse)},
  { 33, -1, sizeof(LookupResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UtilRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Util_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UtilResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LookupResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "router.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _UtilRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RouterRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Util_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _UtilResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _LookupResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::InitDefaults();
  _UtilRequest_default_instance_.DefaultConstruct();
  _RouterRequest_default_instance_.DefaultConstruct();
  _Util_default_instance_.DefaultConstruct();
  _UtilResponse_default_instance_.DefaultConstruct();
  _LookupResponse_default_instance_.DefaultConstruct();
  _RouterRequest_default_instance_.get_mutable()->util_request_ = const_cast< ::router::UtilRequest*>(
      ::router::UtilRequest::internal_default_instance());
  _UtilResponse_default_instance_.get_mutable()->router_util_ = const_cast< ::router::Util*>(
      ::router::Util::internal_default_instance());
  _LookupResponse_default_instance_.get_mutable()->util_response_ = const_cast< ::router::UtilResponse*>(
      ::router::UtilResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014router.proto\022\006router\032 google/protobuf/"
      "descriptor.proto\"#\n\013UtilRequest\022\024\n\014util_"
      "request\030\001 \001(\010\"\302\001\n\rRouterRequest\022\013\n\003key\030\001"
      " \001(\t\022\r\n\005value\030\002 \001(\t\022\021\n\toperation\030\003 \001(\r\022)"
      "\n\014util_request\030\004 \001(\0132\023.router.UtilReques"
      "t\022\024\n\014last_request\030\005 \001(\010\022\021\n\tresp_time\030\006 \001"
      "(\004\022\014\n\004kill\030\007 \001(\010\022\022\n\nrequest_id\030\010 \001(\004\022\014\n\004"
      "load\030\t \001(\r\"R\n\004Util\022\021\n\tuser_time\030\001 \001(\004\022\023\n"
      "\013system_time\030\002 \001(\004\022\017\n\007io_time\030\003 \001(\004\022\021\n\ti"
      "dle_time\030\004 \001(\004\"n\n\014UtilResponse\022\024\n\014util_p"
      "resent\030\001 \001(\010\022%\n\017lookup_srv_util\030\002 \003(\0132\014."
      "router.Util\022!\n\013router_util\030\003 \001(\0132\014.route"
      "r.Util\"\203\005\n\016LookupResponse\022\036\n\026create_rout"
      "er_req_time\030\001 \001(\004\022\036\n\026unpack_router_req_t"
      "ime\030\002 \001(\004\022\037\n\027update_router_util_time\030\003 \001"
      "(\004\022%\n\035get_lookup_srv_responses_time\030\005 \001("
      "\004\022\"\n\032create_lookup_srv_req_time\030\006 \001(\004\022#\n"
      "\033unpack_lookup_srv_resp_time\030\007 \001(\004\022\"\n\032un"
      "pack_lookup_srv_req_time\030\010 \001(\004\022\027\n\017lookup"
      "_srv_time\030\t \001(\004\022!\n\031pack_lookup_srv_resp_"
      "time\030\n \001(\004\022\035\n\025pack_router_resp_time\030\013 \001("
      "\004\022 \n\030number_of_lookup_servers\030\014 \001(\r\022+\n\ru"
      "til_response\030\r \001(\0132\024.router.UtilResponse"
      "\022\021\n\tresp_time\030\016 \001(\004\022\023\n\013router_time\030\017 \001(\004"
      "\022\023\n\013start_stamp\030\020 \001(\004\022\021\n\tend_stamp\030\021 \001(\004"
      "\022\022\n\nrequest_id\030\022 \001(\004\022\022\n\nnum_inline\030\023 \001(\004"
      "\022\023\n\013num_workers\030\024 \001(\004\022\020\n\010num_resp\030\025 \001(\004\022"
      "\020\n\010kill_ack\030\026 \001(\010\022\r\n\005value\030\027 \001(\t\022\022\n\nmerg"
      "e_time\030\030 \001(\0042J\n\rRouterService\0229\n\006Router\022"
      "\025.router.RouterRequest\032\026.router.LookupRe"
      "sponse\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "router.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_router_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UtilRequest::kUtilRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UtilRequest::UtilRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:router.UtilRequest)
}
UtilRequest::UtilRequest(const UtilRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  util_request_ = from.util_request_;
  // @@protoc_insertion_point(copy_constructor:router.UtilRequest)
}

void UtilRequest::SharedCtor() {
  util_request_ = false;
  _cached_size_ = 0;
}

UtilRequest::~UtilRequest() {
  // @@protoc_insertion_point(destructor:router.UtilRequest)
  SharedDtor();
}

void UtilRequest::SharedDtor() {
}

void UtilRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UtilRequest::descriptor() {
  protobuf_router_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_router_2eproto::file_level_metadata[0].descriptor;
}

const UtilRequest& UtilRequest::default_instance() {
  protobuf_router_2eproto::InitDefaults();
  return *internal_default_instance();
}

UtilRequest* UtilRequest::New(::google::protobuf::Arena* arena) const {
  UtilRequest* n = new UtilRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UtilRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:router.UtilRequest)
  util_request_ = false;
}

bool UtilRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:router.UtilRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool util_request = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &util_request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:router.UtilRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:router.UtilRequest)
  return false;
#undef DO_
}

void UtilRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:router.UtilRequest)
  // bool util_request = 1;
  if (this->util_request() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->util_request(), output);
  }

  // @@protoc_insertion_point(serialize_end:router.UtilRequest)
}

::google::protobuf::uint8* UtilRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:router.UtilRequest)
  // bool util_request = 1;
  if (this->util_request() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->util_request(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:router.UtilRequest)
  return target;
}

size_t UtilRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.UtilRequest)
  size_t total_size = 0;

  // bool util_request = 1;
  if (this->util_request() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UtilRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:router.UtilRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UtilRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UtilRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:router.UtilRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:router.UtilRequest)
    MergeFrom(*source);
  }
}

void UtilRequest::MergeFrom(const UtilRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.UtilRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.util_request() != 0) {
    set_util_request(from.util_request());
  }
}

void UtilRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:router.UtilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtilRequest::CopyFrom(const UtilRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.UtilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtilRequest::IsInitialized() const {
  return true;
}

void UtilRequest::Swap(UtilRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UtilRequest::InternalSwap(UtilRequest* other) {
  std::swap(util_request_, other->util_request_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UtilRequest::GetMetadata() const {
  protobuf_router_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_router_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UtilRequest

// bool util_request = 1;
void UtilRequest::clear_util_request() {
  util_request_ = false;
}
bool UtilRequest::util_request() const {
  // @@protoc_insertion_point(field_get:router.UtilRequest.util_request)
  return util_request_;
}
void UtilRequest::set_util_request(bool value) {
  
  util_request_ = value;
  // @@protoc_insertion_point(field_set:router.UtilRequest.util_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouterRequest::kKeyFieldNumber;
const int RouterRequest::kValueFieldNumber;
const int RouterRequest::kOperationFieldNumber;
const int RouterRequest::kUtilRequestFieldNumber;
const int RouterRequest::kLastRequestFieldNumber;
const int RouterRequest::kRespTimeFieldNumber;
const int RouterRequest::kKillFieldNumber;
const int RouterRequest::kRequestIdFieldNumber;
const int RouterRequest::kLoadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouterRequest::RouterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:router.RouterRequest)
}
RouterRequest::RouterRequest(const RouterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_util_request()) {
    util_request_ = new ::router::UtilRequest(*from.util_request_);
  } else {
    util_request_ = NULL;
  }
  ::memcpy(&operation_, &from.operation_,
    reinterpret_cast<char*>(&load_) -
    reinterpret_cast<char*>(&operation_) + sizeof(load_));
  // @@protoc_insertion_point(copy_constructor:router.RouterRequest)
}

void RouterRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&util_request_, 0, reinterpret_cast<char*>(&load_) -
    reinterpret_cast<char*>(&util_request_) + sizeof(load_));
  _cached_size_ = 0;
}

RouterRequest::~RouterRequest() {
  // @@protoc_insertion_point(destructor:router.RouterRequest)
  SharedDtor();
}

void RouterRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete util_request_;
  }
}

void RouterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouterRequest::descriptor() {
  protobuf_router_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_router_2eproto::file_level_metadata[1].descriptor;
}

const RouterRequest& RouterRequest::default_instance() {
  protobuf_router_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouterRequest* RouterRequest::New(::google::protobuf::Arena* arena) const {
  RouterRequest* n = new RouterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:router.RouterRequest)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && util_request_ != NULL) {
    delete util_request_;
  }
  util_request_ = NULL;
  ::memset(&operation_, 0, reinterpret_cast<char*>(&load_) -
    reinterpret_cast<char*>(&operation_) + sizeof(load_));
}

bool RouterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:router.RouterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "router.RouterRequest.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "router.RouterRequest.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 operation = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .router.UtilRequest util_request = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_util_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool last_request = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 resp_time = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resp_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool kill = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 request_id = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 load = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:router.RouterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:router.RouterRequest)
  return false;
#undef DO_
}

void RouterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:router.RouterRequest)
  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "router.RouterRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "router.RouterRequest.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // uint32 operation = 3;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operation(), output);
  }

  // .router.UtilRequest util_request = 4;
  if (this->has_util_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->util_request_, output);
  }

  // bool last_request = 5;
  if (this->last_request() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->last_request(), output);
  }

  // uint64 resp_time = 6;
  if (this->resp_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->resp_time(), output);
  }

  // bool kill = 7;
  if (this->kill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->kill(), output);
  }

  // uint64 request_id = 8;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->request_id(), output);
  }

  // uint32 load = 9;
  if (this->load() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->load(), output);
  }

  // @@protoc_insertion_point(serialize_end:router.RouterRequest)
}

::google::protobuf::uint8* RouterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:router.RouterRequest)
  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "router.RouterRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "router.RouterRequest.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // uint32 operation = 3;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operation(), target);
  }

  // .router.UtilRequest util_request = 4;
  if (this->has_util_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->util_request_, false, target);
  }

  // bool last_request = 5;
  if (this->last_request() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->last_request(), target);
  }

  // uint64 resp_time = 6;
  if (this->resp_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->resp_time(), target);
  }

  // bool kill = 7;
  if (this->kill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->kill(), target);
  }

  // uint64 request_id = 8;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->request_id(), target);
  }

  // uint32 load = 9;
  if (this->load() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->load(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:router.RouterRequest)
  return target;
}

size_t RouterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.RouterRequest)
  size_t total_size = 0;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .router.UtilRequest util_request = 4;
  if (this->has_util_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->util_request_);
  }

  // uint32 operation = 3;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->operation());
  }

  // bool last_request = 5;
  if (this->last_request() != 0) {
    total_size += 1 + 1;
  }

  // bool kill = 7;
  if (this->kill() != 0) {
    total_size += 1 + 1;
  }

  // uint64 resp_time = 6;
  if (this->resp_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->resp_time());
  }

  // uint64 request_id = 8;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_id());
  }

  // uint32 load = 9;
  if (this->load() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->load());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:router.RouterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RouterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:router.RouterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:router.RouterRequest)
    MergeFrom(*source);
  }
}

void RouterRequest::MergeFrom(const RouterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.RouterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_util_request()) {
    mutable_util_request()->::router::UtilRequest::MergeFrom(from.util_request());
  }
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.last_request() != 0) {
    set_last_request(from.last_request());
  }
  if (from.kill() != 0) {
    set_kill(from.kill());
  }
  if (from.resp_time() != 0) {
    set_resp_time(from.resp_time());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.load() != 0) {
    set_load(from.load());
  }
}

void RouterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:router.RouterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterRequest::CopyFrom(const RouterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.RouterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterRequest::IsInitialized() const {
  return true;
}

void RouterRequest::Swap(RouterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouterRequest::InternalSwap(RouterRequest* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(util_request_, other->util_request_);
  std::swap(operation_, other->operation_);
  std::swap(last_request_, other->last_request_);
  std::swap(kill_, other->kill_);
  std::swap(resp_time_, other->resp_time_);
  std::swap(request_id_, other->request_id_);
  std::swap(load_, other->load_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouterRequest::GetMetadata() const {
  protobuf_router_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_router_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouterRequest

// string key = 1;
void RouterRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RouterRequest::key() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.key)
  return key_.GetNoArena();
}
void RouterRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:router.RouterRequest.key)
}
#if LANG_CXX11
void RouterRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:router.RouterRequest.key)
}
#endif
void RouterRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:router.RouterRequest.key)
}
void RouterRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:router.RouterRequest.key)
}
::std::string* RouterRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:router.RouterRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouterRequest::release_key() {
  // @@protoc_insertion_point(field_release:router.RouterRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouterRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:router.RouterRequest.key)
}

// string value = 2;
void RouterRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RouterRequest::value() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.value)
  return value_.GetNoArena();
}
void RouterRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:router.RouterRequest.value)
}
#if LANG_CXX11
void RouterRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:router.RouterRequest.value)
}
#endif
void RouterRequest::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:router.RouterRequest.value)
}
void RouterRequest::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:router.RouterRequest.value)
}
::std::string* RouterRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:router.RouterRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouterRequest::release_value() {
  // @@protoc_insertion_point(field_release:router.RouterRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouterRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:router.RouterRequest.value)
}

// uint32 operation = 3;
void RouterRequest::clear_operation() {
  operation_ = 0u;
}
::google::protobuf::uint32 RouterRequest::operation() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.operation)
  return operation_;
}
void RouterRequest::set_operation(::google::protobuf::uint32 value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:router.RouterRequest.operation)
}

// .router.UtilRequest util_request = 4;
bool RouterRequest::has_util_request() const {
  return this != internal_default_instance() && util_request_ != NULL;
}
void RouterRequest::clear_util_request() {
  if (GetArenaNoVirtual() == NULL && util_request_ != NULL) delete util_request_;
  util_request_ = NULL;
}
const ::router::UtilRequest& RouterRequest::util_request() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.util_request)
  return util_request_ != NULL ? *util_request_
                         : *::router::UtilRequest::internal_default_instance();
}
::router::UtilRequest* RouterRequest::mutable_util_request() {
  
  if (util_request_ == NULL) {
    util_request_ = new ::router::UtilRequest;
  }
  // @@protoc_insertion_point(field_mutable:router.RouterRequest.util_request)
  return util_request_;
}
::router::UtilRequest* RouterRequest::release_util_request() {
  // @@protoc_insertion_point(field_release:router.RouterRequest.util_request)
  
  ::router::UtilRequest* temp = util_request_;
  util_request_ = NULL;
  return temp;
}
void RouterRequest::set_allocated_util_request(::router::UtilRequest* util_request) {
  delete util_request_;
  util_request_ = util_request;
  if (util_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:router.RouterRequest.util_request)
}

// bool last_request = 5;
void RouterRequest::clear_last_request() {
  last_request_ = false;
}
bool RouterRequest::last_request() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.last_request)
  return last_request_;
}
void RouterRequest::set_last_request(bool value) {
  
  last_request_ = value;
  // @@protoc_insertion_point(field_set:router.RouterRequest.last_request)
}

// uint64 resp_time = 6;
void RouterRequest::clear_resp_time() {
  resp_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RouterRequest::resp_time() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.resp_time)
  return resp_time_;
}
void RouterRequest::set_resp_time(::google::protobuf::uint64 value) {
  
  resp_time_ = value;
  // @@protoc_insertion_point(field_set:router.RouterRequest.resp_time)
}

// bool kill = 7;
void RouterRequest::clear_kill() {
  kill_ = false;
}
bool RouterRequest::kill() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.kill)
  return kill_;
}
void RouterRequest::set_kill(bool value) {
  
  kill_ = value;
  // @@protoc_insertion_point(field_set:router.RouterRequest.kill)
}

// uint64 request_id = 8;
void RouterRequest::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RouterRequest::request_id() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.request_id)
  return request_id_;
}
void RouterRequest::set_request_id(::google::protobuf::uint64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:router.RouterRequest.request_id)
}

// uint32 load = 9;
void RouterRequest::clear_load() {
  load_ = 0u;
}
::google::protobuf::uint32 RouterRequest::load() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.load)
  return load_;
}
void RouterRequest::set_load(::google::protobuf::uint32 value) {
  
  load_ = value;
  // @@protoc_insertion_point(field_set:router.RouterRequest.load)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Util::kUserTimeFieldNumber;
const int Util::kSystemTimeFieldNumber;
const int Util::kIoTimeFieldNumber;
const int Util::kIdleTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Util::Util()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:router.Util)
}
Util::Util(const Util& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_time_, &from.user_time_,
    reinterpret_cast<char*>(&idle_time_) -
    reinterpret_cast<char*>(&user_time_) + sizeof(idle_time_));
  // @@protoc_insertion_point(copy_constructor:router.Util)
}

void Util::SharedCtor() {
  ::memset(&user_time_, 0, reinterpret_cast<char*>(&idle_time_) -
    reinterpret_cast<char*>(&user_time_) + sizeof(idle_time_));
  _cached_size_ = 0;
}

Util::~Util() {
  // @@protoc_insertion_point(destructor:router.Util)
  SharedDtor();
}

void Util::SharedDtor() {
}

void Util::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Util::descriptor() {
  protobuf_router_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_router_2eproto::file_level_metadata[2].descriptor;
}

const Util& Util::default_instance() {
  protobuf_router_2eproto::InitDefaults();
  return *internal_default_instance();
}

Util* Util::New(::google::protobuf::Arena* arena) const {
  Util* n = new Util;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Util::Clear() {
// @@protoc_insertion_point(message_clear_start:router.Util)
  ::memset(&user_time_, 0, reinterpret_cast<char*>(&idle_time_) -
    reinterpret_cast<char*>(&user_time_) + sizeof(idle_time_));
}

bool Util::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:router.Util)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 user_time = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 system_time = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &system_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 io_time = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &io_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 idle_time = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idle_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:router.Util)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:router.Util)
  return false;
#undef DO_
}

void Util::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:router.Util)
  // uint64 user_time = 1;
  if (this->user_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_time(), output);
  }

  // uint64 system_time = 2;
  if (this->system_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->system_time(), output);
  }

  // uint64 io_time = 3;
  if (this->io_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->io_time(), output);
  }

  // uint64 idle_time = 4;
  if (this->idle_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->idle_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:router.Util)
}

::google::protobuf::uint8* Util::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:router.Util)
  // uint64 user_time = 1;
  if (this->user_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_time(), target);
  }

  // uint64 system_time = 2;
  if (this->system_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->system_time(), target);
  }

  // uint64 io_time = 3;
  if (this->io_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->io_time(), target);
  }

  // uint64 idle_time = 4;
  if (this->idle_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->idle_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:router.Util)
  return target;
}

size_t Util::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.Util)
  size_t total_size = 0;

  // uint64 user_time = 1;
  if (this->user_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_time());
  }

  // uint64 system_time = 2;
  if (this->system_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->system_time());
  }

  // uint64 io_time = 3;
  if (this->io_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->io_time());
  }

  // uint64 idle_time = 4;
  if (this->idle_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->idle_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Util::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:router.Util)
  GOOGLE_DCHECK_NE(&from, this);
  const Util* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Util>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:router.Util)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:router.Util)
    MergeFrom(*source);
  }
}

void Util::MergeFrom(const Util& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.Util)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.user_time() != 0) {
    set_user_time(from.user_time());
  }
  if (from.system_time() != 0) {
    set_system_time(from.system_time());
  }
  if (from.io_time() != 0) {
    set_io_time(from.io_time());
  }
  if (from.idle_time() != 0) {
    set_idle_time(from.idle_time());
  }
}

void Util::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:router.Util)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Util::CopyFrom(const Util& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.Util)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Util::IsInitialized() const {
  return true;
}

void Util::Swap(Util* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Util::InternalSwap(Util* other) {
  std::swap(user_time_, other->user_time_);
  std::swap(system_time_, other->system_time_);
  std::swap(io_time_, other->io_time_);
  std::swap(idle_time_, other->idle_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Util::GetMetadata() const {
  protobuf_router_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_router_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Util

// uint64 user_time = 1;
void Util::clear_user_time() {
  user_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Util::user_time() const {
  // @@protoc_insertion_point(field_get:router.Util.user_time)
  return user_time_;
}
void Util::set_user_time(::google::protobuf::uint64 value) {
  
  user_time_ = value;
  // @@protoc_insertion_point(field_set:router.Util.user_time)
}

// uint64 system_time = 2;
void Util::clear_system_time() {
  system_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Util::system_time() const {
  // @@protoc_insertion_point(field_get:router.Util.system_time)
  return system_time_;
}
void Util::set_system_time(::google::protobuf::uint64 value) {
  
  system_time_ = value;
  // @@protoc_insertion_point(field_set:router.Util.system_time)
}

// uint64 io_time = 3;
void Util::clear_io_time() {
  io_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Util::io_time() const {
  // @@protoc_insertion_point(field_get:router.Util.io_time)
  return io_time_;
}
void Util::set_io_time(::google::protobuf::uint64 value) {
  
  io_time_ = value;
  // @@protoc_insertion_point(field_set:router.Util.io_time)
}

// uint64 idle_time = 4;
void Util::clear_idle_time() {
  idle_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Util::idle_time() const {
  // @@protoc_insertion_point(field_get:router.Util.idle_time)
  return idle_time_;
}
void Util::set_idle_time(::google::protobuf::uint64 value) {
  
  idle_time_ = value;
  // @@protoc_insertion_point(field_set:router.Util.idle_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UtilResponse::kUtilPresentFieldNumber;
const int UtilResponse::kLookupSrvUtilFieldNumber;
const int UtilResponse::kRouterUtilFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UtilResponse::UtilResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:router.UtilResponse)
}
UtilResponse::UtilResponse(const UtilResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lookup_srv_util_(from.lookup_srv_util_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_router_util()) {
    router_util_ = new ::router::Util(*from.router_util_);
  } else {
    router_util_ = NULL;
  }
  util_present_ = from.util_present_;
  // @@protoc_insertion_point(copy_constructor:router.UtilResponse)
}

void UtilResponse::SharedCtor() {
  ::memset(&router_util_, 0, reinterpret_cast<char*>(&util_present_) -
    reinterpret_cast<char*>(&router_util_) + sizeof(util_present_));
  _cached_size_ = 0;
}

UtilResponse::~UtilResponse() {
  // @@protoc_insertion_point(destructor:router.UtilResponse)
  SharedDtor();
}

void UtilResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete router_util_;
  }
}

void UtilResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UtilResponse::descriptor() {
  protobuf_router_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_router_2eproto::file_level_metadata[3].descriptor;
}

const UtilResponse& UtilResponse::default_instance() {
  protobuf_router_2eproto::InitDefaults();
  return *internal_default_instance();
}

UtilResponse* UtilResponse::New(::google::protobuf::Arena* arena) const {
  UtilResponse* n = new UtilResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UtilResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:router.UtilResponse)
  lookup_srv_util_.Clear();
  if (GetArenaNoVirtual() == NULL && router_util_ != NULL) {
    delete router_util_;
  }
  router_util_ = NULL;
  util_present_ = false;
}

bool UtilResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:router.UtilResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool util_present = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &util_present_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .router.Util lookup_srv_util = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lookup_srv_util()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .router.Util router_util = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_router_util()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:router.UtilResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:router.UtilResponse)
  return false;
#undef DO_
}

void UtilResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:router.UtilResponse)
  // bool util_present = 1;
  if (this->util_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->util_present(), output);
  }

  // repeated .router.Util lookup_srv_util = 2;
  for (unsigned int i = 0, n = this->lookup_srv_util_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lookup_srv_util(i), output);
  }

  // .router.Util router_util = 3;
  if (this->has_router_util()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->router_util_, output);
  }

  // @@protoc_insertion_point(serialize_end:router.UtilResponse)
}

::google::protobuf::uint8* UtilResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:router.UtilResponse)
  // bool util_present = 1;
  if (this->util_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->util_present(), target);
  }

  // repeated .router.Util lookup_srv_util = 2;
  for (unsigned int i = 0, n = this->lookup_srv_util_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lookup_srv_util(i), false, target);
  }

  // .router.Util router_util = 3;
  if (this->has_router_util()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->router_util_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:router.UtilResponse)
  return target;
}

size_t UtilResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.UtilResponse)
  size_t total_size = 0;

  // repeated .router.Util lookup_srv_util = 2;
  {
    unsigned int count = this->lookup_srv_util_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lookup_srv_util(i));
    }
  }

  // .router.Util router_util = 3;
  if (this->has_router_util()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->router_util_);
  }

  // bool util_present = 1;
  if (this->util_present() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UtilResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:router.UtilResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UtilResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UtilResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:router.UtilResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:router.UtilResponse)
    MergeFrom(*source);
  }
}

void UtilResponse::MergeFrom(const UtilResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.UtilResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lookup_srv_util_.MergeFrom(from.lookup_srv_util_);
  if (from.has_router_util()) {
    mutable_router_util()->::router::Util::MergeFrom(from.router_util());
  }
  if (from.util_present() != 0) {
    set_util_present(from.util_present());
  }
}

void UtilResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:router.UtilResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtilResponse::CopyFrom(const UtilResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.UtilResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtilResponse::IsInitialized() const {
  return true;
}

void UtilResponse::Swap(UtilResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UtilResponse::InternalSwap(UtilResponse* other) {
  lookup_srv_util_.UnsafeArenaSwap(&other->lookup_srv_util_);
  std::swap(router_util_, other->router_util_);
  std::swap(util_present_, other->util_present_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UtilResponse::GetMetadata() const {
  protobuf_router_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_router_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UtilResponse

// bool util_present = 1;
void UtilResponse::clear_util_present() {
  util_present_ = false;
}
bool UtilResponse::util_present() const {
  // @@protoc_insertion_point(field_get:router.UtilResponse.util_present)
  return util_present_;
}
void UtilResponse::set_util_present(bool value) {
  
  util_present_ = value;
  // @@protoc_insertion_point(field_set:router.UtilResponse.util_present)
}

// repeated .router.Util lookup_srv_util = 2;
int UtilResponse::lookup_srv_util_size() const {
  return lookup_srv_util_.size();
}
void UtilResponse::clear_lookup_srv_util() {
  lookup_srv_util_.Clear();
}
const ::router::Util& UtilResponse::lookup_srv_util(int index) const {
  // @@protoc_insertion_point(field_get:router.UtilResponse.lookup_srv_util)
  return lookup_srv_util_.Get(index);
}
::router::Util* UtilResponse::mutable_lookup_srv_util(int index) {
  // @@protoc_insertion_point(field_mutable:router.UtilResponse.lookup_srv_util)
  return lookup_srv_util_.Mutable(index);
}
::router::Util* UtilResponse::add_lookup_srv_util() {
  // @@protoc_insertion_point(field_add:router.UtilResponse.lookup_srv_util)
  return lookup_srv_util_.Add();
}
::google::protobuf::RepeatedPtrField< ::router::Util >*
UtilResponse::mutable_lookup_srv_util() {
  // @@protoc_insertion_point(field_mutable_list:router.UtilResponse.lookup_srv_util)
  return &lookup_srv_util_;
}
const ::google::protobuf::RepeatedPtrField< ::router::Util >&
UtilResponse::lookup_srv_util() const {
  // @@protoc_insertion_point(field_list:router.UtilResponse.lookup_srv_util)
  return lookup_srv_util_;
}

// .router.Util router_util = 3;
bool UtilResponse::has_router_util() const {
  return this != internal_default_instance() && router_util_ != NULL;
}
void UtilResponse::clear_router_util() {
  if (GetArenaNoVirtual() == NULL && router_util_ != NULL) delete router_util_;
  router_util_ = NULL;
}
const ::router::Util& UtilResponse::router_util() const {
  // @@protoc_insertion_point(field_get:router.UtilResponse.router_util)
  return router_util_ != NULL ? *router_util_
                         : *::router::Util::internal_default_instance();
}
::router::Util* UtilResponse::mutable_router_util() {
  
  if (router_util_ == NULL) {
    router_util_ = new ::router::Util;
  }
  // @@protoc_insertion_point(field_mutable:router.UtilResponse.router_util)
  return router_util_;
}
::router::Util* UtilResponse::release_router_util() {
  // @@protoc_insertion_point(field_release:router.UtilResponse.router_util)
  
  ::router::Util* temp = router_util_;
  router_util_ = NULL;
  return temp;
}
void UtilResponse::set_allocated_router_util(::router::Util* router_util) {
  delete router_util_;
  router_util_ = router_util;
  if (router_util) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:router.UtilResponse.router_util)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LookupResponse::kCreateRouterReqTimeFieldNumber;
const int LookupResponse::kUnpackRouterReqTimeFieldNumber;
const int LookupResponse::kUpdateRouterUtilTimeFieldNumber;
const int LookupResponse::kGetLookupSrvResponsesTimeFieldNumber;
const int LookupResponse::kCreateLookupSrvReqTimeFieldNumber;
const int LookupResponse::kUnpackLookupSrvRespTimeFieldNumber;
const int LookupResponse::kUnpackLookupSrvReqTimeFieldNumber;
const int LookupResponse::kLookupSrvTimeFieldNumber;
const int LookupResponse::kPackLookupSrvRespTimeFieldNumber;
const int LookupResponse::kPackRouterRespTimeFieldNumber;
const int LookupResponse::kNumberOfLookupServersFieldNumber;
const int LookupResponse::kUtilResponseFieldNumber;
const int LookupResponse::kRespTimeFieldNumber;
const int LookupResponse::kRouterTimeFieldNumber;
const int LookupResponse::kStartStampFieldNumber;
const int LookupResponse::kEndStampFieldNumber;
const int LookupResponse::kRequestIdFieldNumber;
const int LookupResponse::kNumInlineFieldNumber;
const int LookupResponse::kNumWorkersFieldNumber;
const int LookupResponse::kNumRespFieldNumber;
const int LookupResponse::kKillAckFieldNumber;
const int LookupResponse::kValueFieldNumber;
const int LookupResponse::kMergeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LookupResponse::LookupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:router.LookupResponse)
}
LookupResponse::LookupResponse(const LookupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_util_response()) {
    util_response_ = new ::router::UtilResponse(*from.util_response_);
  } else {
    util_response_ = NULL;
  }
  ::memcpy(&create_router_req_time_, &from.create_router_req_time_,
    reinterpret_cast<char*>(&merge_time_) -
    reinterpret_cast<char*>(&create_router_req_time_) + sizeof(merge_time_));
  // @@protoc_insertion_point(copy_constructor:router.LookupResponse)
}

void LookupResponse::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&util_response_, 0, reinterpret_cast<char*>(&merge_time_) -
    reinterpret_cast<char*>(&util_response_) + sizeof(merge_time_));
  _cached_size_ = 0;
}

LookupResponse::~LookupResponse() {
  // @@protoc_insertion_point(destructor:router.LookupResponse)
  SharedDtor();
}

void LookupResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete util_response_;
  }
}

void LookupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LookupResponse::descriptor() {
  protobuf_router_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_router_2eproto::file_level_metadata[4].descriptor;
}

const LookupResponse& LookupResponse::default_instance() {
  protobuf_router_2eproto::InitDefaults();
  return *internal_default_instance();
}

LookupResponse* LookupResponse::New(::google::protobuf::Arena* arena) const {
  LookupResponse* n = new LookupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LookupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:router.LookupResponse)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && util_response_ != NULL) {
    delete util_response_;
  }
  util_response_ = NULL;
  ::memset(&create_router_req_time_, 0, reinterpret_cast<char*>(&merge_time_) -
    reinterpret_cast<char*>(&create_router_req_time_) + sizeof(merge_time_));
}

bool LookupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:router.LookupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 create_router_req_time = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_router_req_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 unpack_router_req_time = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unpack_router_req_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 update_router_util_time = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_router_util_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 get_lookup_srv_responses_time = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &get_lookup_srv_responses_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 create_lookup_srv_req_time = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_lookup_srv_req_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 unpack_lookup_srv_resp_time = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unpack_lookup_srv_resp_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 unpack_lookup_srv_req_time = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unpack_lookup_srv_req_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lookup_srv_time = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lookup_srv_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 pack_lookup_srv_resp_time = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pack_lookup_srv_resp_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 pack_router_resp_time = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pack_router_resp_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_lookup_servers = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_lookup_servers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .router.UtilResponse util_response = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_util_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 resp_time = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resp_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 router_time = 15;
      case 15: {
        if (tag == 120u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &router_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 start_stamp = 16;
      case 16: {
        if (tag == 128u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 end_stamp = 17;
      case 17: {
        if (tag == 136u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 request_id = 18;
      case 18: {
        if (tag == 144u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 num_inline = 19;
      case 19: {
        if (tag == 152u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_inline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 num_workers = 20;
      case 20: {
        if (tag == 160u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_workers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 num_resp = 21;
      case 21: {
        if (tag == 168u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_resp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool kill_ack = 22;
      case 22: {
        if (tag == 176u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kill_ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 23;
      case 23: {
        if (tag == 186u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "router.LookupResponse.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 merge_time = 24;
      case 24: {
        if (tag == 192u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &merge_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:router.LookupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:router.LookupResponse)
  return false;
#undef DO_
}

void LookupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:router.LookupResponse)
  // uint64 create_router_req_time = 1;
  if (this->create_router_req_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->create_router_req_time(), output);
  }

  // uint64 unpack_router_req_time = 2;
  if (this->unpack_router_req_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->unpack_router_req_time(), output);
  }

  // uint64 update_router_util_time = 3;
  if (this->update_router_util_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->update_router_util_time(), output);
  }

  // uint64 get_lookup_srv_responses_time = 5;
  if (this->get_lookup_srv_responses_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->get_lookup_srv_responses_time(), output);
  }

  // uint64 create_lookup_srv_req_time = 6;
  if (this->create_lookup_srv_req_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->create_lookup_srv_req_time(), output);
  }

  // uint64 unpack_lookup_srv_resp_time = 7;
  if (this->unpack_lookup_srv_resp_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->unpack_lookup_srv_resp_time(), output);
  }

  // uint64 unpack_lookup_srv_req_time = 8;
  if (this->unpack_lookup_srv_req_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->unpack_lookup_srv_req_time(), output);
  }

  // uint64 lookup_srv_time = 9;
  if (this->lookup_srv_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->lookup_srv_time(), output);
  }

  // uint64 pack_lookup_srv_resp_time = 10;
  if (this->pack_lookup_srv_resp_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->pack_lookup_srv_resp_time(), output);
  }

  // uint64 pack_router_resp_time = 11;
  if (this->pack_router_resp_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->pack_router_resp_time(), output);
  }

  // uint32 number_of_lookup_servers = 12;
  if (this->number_of_lookup_servers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->number_of_lookup_servers(), output);
  }

  // .router.UtilResponse util_response = 13;
  if (this->has_util_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->util_response_, output);
  }

  // uint64 resp_time = 14;
  if (this->resp_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->resp_time(), output);
  }

  // uint64 router_time = 15;
  if (this->router_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->router_time(), output);
  }

  // uint64 start_stamp = 16;
  if (this->start_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->start_stamp(), output);
  }

  // uint64 end_stamp = 17;
  if (this->end_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->end_stamp(), output);
  }

  // uint64 request_id = 18;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->request_id(), output);
  }

  // uint64 num_inline = 19;
  if (this->num_inline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->num_inline(), output);
  }

  // uint64 num_workers = 20;
  if (this->num_workers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->num_workers(), output);
  }

  // uint64 num_resp = 21;
  if (this->num_resp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->num_resp(), output);
  }

  // bool kill_ack = 22;
  if (this->kill_ack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->kill_ack(), output);
  }

  // string value = 23;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "router.LookupResponse.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->value(), output);
  }

  // uint64 merge_time = 24;
  if (this->merge_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->merge_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:router.LookupResponse)
}

::google::protobuf::uint8* LookupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:router.LookupResponse)
  // uint64 create_router_req_time = 1;
  if (this->create_router_req_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->create_router_req_time(), target);
  }

  // uint64 unpack_router_req_time = 2;
  if (this->unpack_router_req_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->unpack_router_req_time(), target);
  }

  // uint64 update_router_util_time = 3;
  if (this->update_router_util_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->update_router_util_time(), target);
  }

  // uint64 get_lookup_srv_responses_time = 5;
  if (this->get_lookup_srv_responses_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->get_lookup_srv_responses_time(), target);
  }

  // uint64 create_lookup_srv_req_time = 6;
  if (this->create_lookup_srv_req_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->create_lookup_srv_req_time(), target);
  }

  // uint64 unpack_lookup_srv_resp_time = 7;
  if (this->unpack_lookup_srv_resp_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->unpack_lookup_srv_resp_time(), target);
  }

  // uint64 unpack_lookup_srv_req_time = 8;
  if (this->unpack_lookup_srv_req_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->unpack_lookup_srv_req_time(), target);
  }

  // uint64 lookup_srv_time = 9;
  if (this->lookup_srv_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->lookup_srv_time(), target);
  }

  // uint64 pack_lookup_srv_resp_time = 10;
  if (this->pack_lookup_srv_resp_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->pack_lookup_srv_resp_time(), target);
  }

  // uint64 pack_router_resp_time = 11;
  if (this->pack_router_resp_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->pack_router_resp_time(), target);
  }

  // uint32 number_of_lookup_servers = 12;
  if (this->number_of_lookup_servers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->number_of_lookup_servers(), target);
  }

  // .router.UtilResponse util_response = 13;
  if (this->has_util_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->util_response_, false, target);
  }

  // uint64 resp_time = 14;
  if (this->resp_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->resp_time(), target);
  }

  // uint64 router_time = 15;
  if (this->router_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->router_time(), target);
  }

  // uint64 start_stamp = 16;
  if (this->start_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->start_stamp(), target);
  }

  // uint64 end_stamp = 17;
  if (this->end_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->end_stamp(), target);
  }

  // uint64 request_id = 18;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->request_id(), target);
  }

  // uint64 num_inline = 19;
  if (this->num_inline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->num_inline(), target);
  }

  // uint64 num_workers = 20;
  if (this->num_workers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->num_workers(), target);
  }

  // uint64 num_resp = 21;
  if (this->num_resp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->num_resp(), target);
  }

  // bool kill_ack = 22;
  if (this->kill_ack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->kill_ack(), target);
  }

  // string value = 23;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "router.LookupResponse.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->value(), target);
  }

  // uint64 merge_time = 24;
  if (this->merge_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->merge_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:router.LookupResponse)
  return target;
}

size_t LookupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.LookupResponse)
  size_t total_size = 0;

  // string value = 23;
  if (this->value().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .router.UtilResponse util_response = 13;
  if (this->has_util_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->util_response_);
  }

  // uint64 create_router_req_time = 1;
  if (this->create_router_req_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->create_router_req_time());
  }

  // uint64 unpack_router_req_time = 2;
  if (this->unpack_router_req_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unpack_router_req_time());
  }

  // uint64 update_router_util_time = 3;
  if (this->update_router_util_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->update_router_util_time());
  }

  // uint64 get_lookup_srv_responses_time = 5;
  if (this->get_lookup_srv_responses_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->get_lookup_srv_responses_time());
  }

  // uint64 create_lookup_srv_req_time = 6;
  if (this->create_lookup_srv_req_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->create_lookup_srv_req_time());
  }

  // uint64 unpack_lookup_srv_resp_time = 7;
  if (this->unpack_lookup_srv_resp_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unpack_lookup_srv_resp_time());
  }

  // uint64 unpack_lookup_srv_req_time = 8;
  if (this->unpack_lookup_srv_req_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unpack_lookup_srv_req_time());
  }

  // uint64 lookup_srv_time = 9;
  if (this->lookup_srv_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lookup_srv_time());
  }

  // uint64 pack_lookup_srv_resp_time = 10;
  if (this->pack_lookup_srv_resp_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pack_lookup_srv_resp_time());
  }

  // uint64 pack_router_resp_time = 11;
  if (this->pack_router_resp_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pack_router_resp_time());
  }

  // uint64 resp_time = 14;
  if (this->resp_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->resp_time());
  }

  // uint64 router_time = 15;
  if (this->router_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->router_time());
  }

  // uint64 start_stamp = 16;
  if (this->start_stamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_stamp());
  }

  // uint64 end_stamp = 17;
  if (this->end_stamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_stamp());
  }

  // uint32 number_of_lookup_servers = 12;
  if (this->number_of_lookup_servers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_lookup_servers());
  }

  // bool kill_ack = 22;
  if (this->kill_ack() != 0) {
    total_size += 2 + 1;
  }

  // uint64 request_id = 18;
  if (this->request_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_id());
  }

  // uint64 num_inline = 19;
  if (this->num_inline() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_inline());
  }

  // uint64 num_workers = 20;
  if (this->num_workers() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_workers());
  }

  // uint64 num_resp = 21;
  if (this->num_resp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_resp());
  }

  // uint64 merge_time = 24;
  if (this->merge_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->merge_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LookupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:router.LookupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LookupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LookupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:router.LookupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:router.LookupResponse)
    MergeFrom(*source);
  }
}

void LookupResponse::MergeFrom(const LookupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.LookupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_util_response()) {
    mutable_util_response()->::router::UtilResponse::MergeFrom(from.util_response());
  }
  if (from.create_router_req_time() != 0) {
    set_create_router_req_time(from.create_router_req_time());
  }
  if (from.unpack_router_req_time() != 0) {
    set_unpack_router_req_time(from.unpack_router_req_time());
  }
  if (from.update_router_util_time() != 0) {
    set_update_router_util_time(from.update_router_util_time());
  }
  if (from.get_lookup_srv_responses_time() != 0) {
    set_get_lookup_srv_responses_time(from.get_lookup_srv_responses_time());
  }
  if (from.create_lookup_srv_req_time() != 0) {
    set_create_lookup_srv_req_time(from.create_lookup_srv_req_time());
  }
  if (from.unpack_lookup_srv_resp_time() != 0) {
    set_unpack_lookup_srv_resp_time(from.unpack_lookup_srv_resp_time());
  }
  if (from.unpack_lookup_srv_req_time() != 0) {
    set_unpack_lookup_srv_req_time(from.unpack_lookup_srv_req_time());
  }
  if (from.lookup_srv_time() != 0) {
    set_lookup_srv_time(from.lookup_srv_time());
  }
  if (from.pack_lookup_srv_resp_time() != 0) {
    set_pack_lookup_srv_resp_time(from.pack_lookup_srv_resp_time());
  }
  if (from.pack_router_resp_time() != 0) {
    set_pack_router_resp_time(from.pack_router_resp_time());
  }
  if (from.resp_time() != 0) {
    set_resp_time(from.resp_time());
  }
  if (from.router_time() != 0) {
    set_router_time(from.router_time());
  }
  if (from.start_stamp() != 0) {
    set_start_stamp(from.start_stamp());
  }
  if (from.end_stamp() != 0) {
    set_end_stamp(from.end_stamp());
  }
  if (from.number_of_lookup_servers() != 0) {
    set_number_of_lookup_servers(from.number_of_lookup_servers());
  }
  if (from.kill_ack() != 0) {
    set_kill_ack(from.kill_ack());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.num_inline() != 0) {
    set_num_inline(from.num_inline());
  }
  if (from.num_workers() != 0) {
    set_num_workers(from.num_workers());
  }
  if (from.num_resp() != 0) {
    set_num_resp(from.num_resp());
  }
  if (from.merge_time() != 0) {
    set_merge_time(from.merge_time());
  }
}

void LookupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:router.LookupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupResponse::CopyFrom(const LookupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.LookupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResponse::IsInitialized() const {
  return true;
}

void LookupResponse::Swap(LookupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LookupResponse::InternalSwap(LookupResponse* other) {
  value_.Swap(&other->value_);
  std::swap(util_response_, other->util_response_);
  std::swap(create_router_req_time_, other->create_router_req_time_);
  std::swap(unpack_router_req_time_, other->unpack_router_req_time_);
  std::swap(update_router_util_time_, other->update_router_util_time_);
  std::swap(get_lookup_srv_responses_time_, other->get_lookup_srv_responses_time_);
  std::swap(create_lookup_srv_req_time_, other->create_lookup_srv_req_time_);
  std::swap(unpack_lookup_srv_resp_time_, other->unpack_lookup_srv_resp_time_);
  std::swap(unpack_lookup_srv_req_time_, other->unpack_lookup_srv_req_time_);
  std::swap(lookup_srv_time_, other->lookup_srv_time_);
  std::swap(pack_lookup_srv_resp_time_, other->pack_lookup_srv_resp_time_);
  std::swap(pack_router_resp_time_, other->pack_router_resp_time_);
  std::swap(resp_time_, other->resp_time_);
  std::swap(router_time_, other->router_time_);
  std::swap(start_stamp_, other->start_stamp_);
  std::swap(end_stamp_, other->end_stamp_);
  std::swap(number_of_lookup_servers_, other->number_of_lookup_servers_);
  std::swap(kill_ack_, other->kill_ack_);
  std::swap(request_id_, other->request_id_);
  std::swap(num_inline_, other->num_inline_);
  std::swap(num_workers_, other->num_workers_);
  std::swap(num_resp_, other->num_resp_);
  std::swap(merge_time_, other->merge_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LookupResponse::GetMetadata() const {
  protobuf_router_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_router_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LookupResponse

// uint64 create_router_req_time = 1;
void LookupResponse::clear_create_router_req_time() {
  create_router_req_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::create_router_req_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.create_router_req_time)
  return create_router_req_time_;
}
void LookupResponse::set_create_router_req_time(::google::protobuf::uint64 value) {
  
  create_router_req_time_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.create_router_req_time)
}

// uint64 unpack_router_req_time = 2;
void LookupResponse::clear_unpack_router_req_time() {
  unpack_router_req_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::unpack_router_req_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.unpack_router_req_time)
  return unpack_router_req_time_;
}
void LookupResponse::set_unpack_router_req_time(::google::protobuf::uint64 value) {
  
  unpack_router_req_time_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.unpack_router_req_time)
}

// uint64 update_router_util_time = 3;
void LookupResponse::clear_update_router_util_time() {
  update_router_util_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::update_router_util_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.update_router_util_time)
  return update_router_util_time_;
}
void LookupResponse::set_update_router_util_time(::google::protobuf::uint64 value) {
  
  update_router_util_time_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.update_router_util_time)
}

// uint64 get_lookup_srv_responses_time = 5;
void LookupResponse::clear_get_lookup_srv_responses_time() {
  get_lookup_srv_responses_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::get_lookup_srv_responses_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.get_lookup_srv_responses_time)
  return get_lookup_srv_responses_time_;
}
void LookupResponse::set_get_lookup_srv_responses_time(::google::protobuf::uint64 value) {
  
  get_lookup_srv_responses_time_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.get_lookup_srv_responses_time)
}

// uint64 create_lookup_srv_req_time = 6;
void LookupResponse::clear_create_lookup_srv_req_time() {
  create_lookup_srv_req_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::create_lookup_srv_req_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.create_lookup_srv_req_time)
  return create_lookup_srv_req_time_;
}
void LookupResponse::set_create_lookup_srv_req_time(::google::protobuf::uint64 value) {
  
  create_lookup_srv_req_time_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.create_lookup_srv_req_time)
}

// uint64 unpack_lookup_srv_resp_time = 7;
void LookupResponse::clear_unpack_lookup_srv_resp_time() {
  unpack_lookup_srv_resp_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::unpack_lookup_srv_resp_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.unpack_lookup_srv_resp_time)
  return unpack_lookup_srv_resp_time_;
}
void LookupResponse::set_unpack_lookup_srv_resp_time(::google::protobuf::uint64 value) {
  
  unpack_lookup_srv_resp_time_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.unpack_lookup_srv_resp_time)
}

// uint64 unpack_lookup_srv_req_time = 8;
void LookupResponse::clear_unpack_lookup_srv_req_time() {
  unpack_lookup_srv_req_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::unpack_lookup_srv_req_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.unpack_lookup_srv_req_time)
  return unpack_lookup_srv_req_time_;
}
void LookupResponse::set_unpack_lookup_srv_req_time(::google::protobuf::uint64 value) {
  
  unpack_lookup_srv_req_time_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.unpack_lookup_srv_req_time)
}

// uint64 lookup_srv_time = 9;
void LookupResponse::clear_lookup_srv_time() {
  lookup_srv_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::lookup_srv_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.lookup_srv_time)
  return lookup_srv_time_;
}
void LookupResponse::set_lookup_srv_time(::google::protobuf::uint64 value) {
  
  lookup_srv_time_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.lookup_srv_time)
}

// uint64 pack_lookup_srv_resp_time = 10;
void LookupResponse::clear_pack_lookup_srv_resp_time() {
  pack_lookup_srv_resp_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::pack_lookup_srv_resp_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.pack_lookup_srv_resp_time)
  return pack_lookup_srv_resp_time_;
}
void LookupResponse::set_pack_lookup_srv_resp_time(::google::protobuf::uint64 value) {
  
  pack_lookup_srv_resp_time_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.pack_lookup_srv_resp_time)
}

// uint64 pack_router_resp_time = 11;
void LookupResponse::clear_pack_router_resp_time() {
  pack_router_resp_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::pack_router_resp_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.pack_router_resp_time)
  return pack_router_resp_time_;
}
void LookupResponse::set_pack_router_resp_time(::google::protobuf::uint64 value) {
  
  pack_router_resp_time_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.pack_router_resp_time)
}

// uint32 number_of_lookup_servers = 12;
void LookupResponse::clear_number_of_lookup_servers() {
  number_of_lookup_servers_ = 0u;
}
::google::protobuf::uint32 LookupResponse::number_of_lookup_servers() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.number_of_lookup_servers)
  return number_of_lookup_servers_;
}
void LookupResponse::set_number_of_lookup_servers(::google::protobuf::uint32 value) {
  
  number_of_lookup_servers_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.number_of_lookup_servers)
}

// .router.UtilResponse util_response = 13;
bool LookupResponse::has_util_response() const {
  return this != internal_default_instance() && util_response_ != NULL;
}
void LookupResponse::clear_util_response() {
  if (GetArenaNoVirtual() == NULL && util_response_ != NULL) delete util_response_;
  util_response_ = NULL;
}
const ::router::UtilResponse& LookupResponse::util_response() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.util_response)
  return util_response_ != NULL ? *util_response_
                         : *::router::UtilResponse::internal_default_instance();
}
::router::UtilResponse* LookupResponse::mutable_util_response() {
  
  if (util_response_ == NULL) {
    util_response_ = new ::router::UtilResponse;
  }
  // @@protoc_insertion_point(field_mutable:router.LookupResponse.util_response)
  return util_response_;
}
::router::UtilResponse* LookupResponse::release_util_response() {
  // @@protoc_insertion_point(field_release:router.LookupResponse.util_response)
  
  ::router::UtilResponse* temp = util_response_;
  util_response_ = NULL;
  return temp;
}
void LookupResponse::set_allocated_util_response(::router::UtilResponse* util_response) {
  delete util_response_;
  util_response_ = util_response;
  if (util_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:router.LookupResponse.util_response)
}

// uint64 resp_time = 14;
void LookupResponse::clear_resp_time() {
  resp_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::resp_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.resp_time)
  return resp_time_;
}
void LookupResponse::set_resp_time(::google::protobuf::uint64 value) {
  
  resp_time_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.resp_time)
}

// uint64 router_time = 15;
void LookupResponse::clear_router_time() {
  router_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::router_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.router_time)
  return router_time_;
}
void LookupResponse::set_router_time(::google::protobuf::uint64 value) {
  
  router_time_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.router_time)
}

// uint64 start_stamp = 16;
void LookupResponse::clear_start_stamp() {
  start_stamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::start_stamp() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.start_stamp)
  return start_stamp_;
}
void LookupResponse::set_start_stamp(::google::protobuf::uint64 value) {
  
  start_stamp_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.start_stamp)
}

// uint64 end_stamp = 17;
void LookupResponse::clear_end_stamp() {
  end_stamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::end_stamp() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.end_stamp)
  return end_stamp_;
}
void LookupResponse::set_end_stamp(::google::protobuf::uint64 value) {
  
  end_stamp_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.end_stamp)
}

// uint64 request_id = 18;
void LookupResponse::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::request_id() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.request_id)
  return request_id_;
}
void LookupResponse::set_request_id(::google::protobuf::uint64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.request_id)
}

// uint64 num_inline = 19;
void LookupResponse::clear_num_inline() {
  num_inline_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::num_inline() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.num_inline)
  return num_inline_;
}
void LookupResponse::set_num_inline(::google::protobuf::uint64 value) {
  
  num_inline_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.num_inline)
}

// uint64 num_workers = 20;
void LookupResponse::clear_num_workers() {
  num_workers_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::num_workers() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.num_workers)
  return num_workers_;
}
void LookupResponse::set_num_workers(::google::protobuf::uint64 value) {
  
  num_workers_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.num_workers)
}

// uint64 num_resp = 21;
void LookupResponse::clear_num_resp() {
  num_resp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::num_resp() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.num_resp)
  return num_resp_;
}
void LookupResponse::set_num_resp(::google::protobuf::uint64 value) {
  
  num_resp_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.num_resp)
}

// bool kill_ack = 22;
void LookupResponse::clear_kill_ack() {
  kill_ack_ = false;
}
bool LookupResponse::kill_ack() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.kill_ack)
  return kill_ack_;
}
void LookupResponse::set_kill_ack(bool value) {
  
  kill_ack_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.kill_ack)
}

// string value = 23;
void LookupResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LookupResponse::value() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.value)
  return value_.GetNoArena();
}
void LookupResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.value)
}
#if LANG_CXX11
void LookupResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:router.LookupResponse.value)
}
#endif
void LookupResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:router.LookupResponse.value)
}
void LookupResponse::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:router.LookupResponse.value)
}
::std::string* LookupResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:router.LookupResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LookupResponse::release_value() {
  // @@protoc_insertion_point(field_release:router.LookupResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LookupResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:router.LookupResponse.value)
}

// uint64 merge_time = 24;
void LookupResponse::clear_merge_time() {
  merge_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LookupResponse::merge_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.merge_time)
  return merge_time_;
}
void LookupResponse::set_merge_time(::google::protobuf::uint64 value) {
  
  merge_time_ = value;
  // @@protoc_insertion_point(field_set:router.LookupResponse.merge_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace router

// @@protoc_insertion_point(global_scope)
