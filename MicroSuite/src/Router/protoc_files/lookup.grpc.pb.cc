// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lookup.proto

#include "lookup.pb.h"
#include "lookup.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace lookup {

static const char* LookupService_method_names[] = {
  "/lookup.LookupService/KeyLookup",
};

std::unique_ptr< LookupService::Stub> LookupService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< LookupService::Stub> stub(new LookupService::Stub(channel));
  return stub;
}

LookupService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_KeyLookup_(LookupService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LookupService::Stub::KeyLookup(::grpc::ClientContext* context, const ::lookup::Key& request, ::lookup::Value* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KeyLookup_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::lookup::Value>* LookupService::Stub::AsyncKeyLookupRaw(::grpc::ClientContext* context, const ::lookup::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lookup::Value>::Create(channel_.get(), cq, rpcmethod_KeyLookup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lookup::Value>* LookupService::Stub::PrepareAsyncKeyLookupRaw(::grpc::ClientContext* context, const ::lookup::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lookup::Value>::Create(channel_.get(), cq, rpcmethod_KeyLookup_, context, request, false);
}

LookupService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LookupService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LookupService::Service, ::lookup::Key, ::lookup::Value>(
          std::mem_fn(&LookupService::Service::KeyLookup), this)));
}

LookupService::Service::~Service() {
}

::grpc::Status LookupService::Service::KeyLookup(::grpc::ServerContext* context, const ::lookup::Key* request, ::lookup::Value* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace lookup

