// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lookup.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lookup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lookup {
class UtilRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UtilRequest> {
} _UtilRequest_default_instance_;
class KeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Key> {
} _Key_default_instance_;
class TimingDataInMicroDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimingDataInMicro> {
} _TimingDataInMicro_default_instance_;
class UtilResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UtilResponse> {
} _UtilResponse_default_instance_;
class ValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Value> {
} _Value_default_instance_;

namespace protobuf_lookup_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilRequest, util_request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, util_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, index_view_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, lookup_server_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingDataInMicro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingDataInMicro, unpack_lookup_srv_req_time_in_micro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingDataInMicro, lookup_srv_time_in_micro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingDataInMicro, pack_lookup_srv_resp_time_in_micro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingDataInMicro, cpu_util_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, util_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, user_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, system_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, io_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UtilResponse, idle_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, timing_data_in_micro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, util_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, recv_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, send_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, index_view_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, bucket_server_id_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(UtilRequest)},
  { 5, -1, sizeof(Key)},
  { 16, -1, sizeof(TimingDataInMicro)},
  { 24, -1, sizeof(UtilResponse)},
  { 33, -1, sizeof(Value)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UtilRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Key_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimingDataInMicro_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UtilResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Value_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "lookup.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _UtilRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Key_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TimingDataInMicro_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _UtilResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Value_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UtilRequest_default_instance_.DefaultConstruct();
  _Key_default_instance_.DefaultConstruct();
  _TimingDataInMicro_default_instance_.DefaultConstruct();
  _UtilResponse_default_instance_.DefaultConstruct();
  _Value_default_instance_.DefaultConstruct();
  _Key_default_instance_.get_mutable()->util_request_ = const_cast< ::lookup::UtilRequest*>(
      ::lookup::UtilRequest::internal_default_instance());
  _Value_default_instance_.get_mutable()->timing_data_in_micro_ = const_cast< ::lookup::TimingDataInMicro*>(
      ::lookup::TimingDataInMicro::internal_default_instance());
  _Value_default_instance_.get_mutable()->util_response_ = const_cast< ::lookup::UtilResponse*>(
      ::lookup::UtilResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014lookup.proto\022\006lookup\"#\n\013UtilRequest\022\024\n"
      "\014util_request\030\001 \001(\010\"\241\001\n\003Key\022\021\n\toperation"
      "\030\001 \001(\r\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022)\n\014ut"
      "il_request\030\004 \001(\0132\023.lookup.UtilRequest\022\022\n"
      "\nrequest_id\030\005 \001(\004\022\022\n\nindex_view\030\006 \001(\004\022\030\n"
      "\020lookup_server_id\030\007 \001(\r\"\240\001\n\021TimingDataIn"
      "Micro\022+\n#unpack_lookup_srv_req_time_in_m"
      "icro\030\001 \001(\004\022 \n\030lookup_srv_time_in_micro\030\002"
      " \001(\004\022*\n\"pack_lookup_srv_resp_time_in_mic"
      "ro\030\003 \001(\004\022\020\n\010cpu_util\030\004 \001(\002\"p\n\014UtilRespon"
      "se\022\024\n\014util_present\030\001 \001(\010\022\021\n\tuser_time\030\002 "
      "\001(\004\022\023\n\013system_time\030\003 \001(\004\022\017\n\007io_time\030\004 \001("
      "\004\022\021\n\tidle_time\030\005 \001(\004\"\346\001\n\005Value\022\r\n\005value\030"
      "\001 \001(\t\0227\n\024timing_data_in_micro\030\002 \001(\0132\031.lo"
      "okup.TimingDataInMicro\022+\n\rutil_response\030"
      "\003 \001(\0132\024.lookup.UtilResponse\022\022\n\nrequest_i"
      "d\030\004 \001(\004\022\022\n\nrecv_stamp\030\005 \001(\004\022\022\n\nsend_stam"
      "p\030\006 \001(\004\022\022\n\nindex_view\030\007 \001(\004\022\030\n\020bucket_se"
      "rver_id\030\010 \001(\r2:\n\rLookupService\022)\n\tKeyLoo"
      "kup\022\013.lookup.Key\032\r.lookup.Value\"\000b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 801);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lookup.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_lookup_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UtilRequest::kUtilRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UtilRequest::UtilRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lookup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lookup.UtilRequest)
}
UtilRequest::UtilRequest(const UtilRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  util_request_ = from.util_request_;
  // @@protoc_insertion_point(copy_constructor:lookup.UtilRequest)
}

void UtilRequest::SharedCtor() {
  util_request_ = false;
  _cached_size_ = 0;
}

UtilRequest::~UtilRequest() {
  // @@protoc_insertion_point(destructor:lookup.UtilRequest)
  SharedDtor();
}

void UtilRequest::SharedDtor() {
}

void UtilRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UtilRequest::descriptor() {
  protobuf_lookup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lookup_2eproto::file_level_metadata[0].descriptor;
}

const UtilRequest& UtilRequest::default_instance() {
  protobuf_lookup_2eproto::InitDefaults();
  return *internal_default_instance();
}

UtilRequest* UtilRequest::New(::google::protobuf::Arena* arena) const {
  UtilRequest* n = new UtilRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UtilRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lookup.UtilRequest)
  util_request_ = false;
}

bool UtilRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lookup.UtilRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool util_request = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &util_request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lookup.UtilRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lookup.UtilRequest)
  return false;
#undef DO_
}

void UtilRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lookup.UtilRequest)
  // bool util_request = 1;
  if (this->util_request() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->util_request(), output);
  }

  // @@protoc_insertion_point(serialize_end:lookup.UtilRequest)
}

::google::protobuf::uint8* UtilRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lookup.UtilRequest)
  // bool util_request = 1;
  if (this->util_request() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->util_request(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lookup.UtilRequest)
  return target;
}

size_t UtilRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lookup.UtilRequest)
  size_t total_size = 0;

  // bool util_request = 1;
  if (this->util_request() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UtilRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lookup.UtilRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UtilRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UtilRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lookup.UtilRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lookup.UtilRequest)
    MergeFrom(*source);
  }
}

void UtilRequest::MergeFrom(const UtilRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lookup.UtilRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.util_request() != 0) {
    set_util_request(from.util_request());
  }
}

void UtilRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lookup.UtilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtilRequest::CopyFrom(const UtilRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lookup.UtilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtilRequest::IsInitialized() const {
  return true;
}

void UtilRequest::Swap(UtilRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UtilRequest::InternalSwap(UtilRequest* other) {
  std::swap(util_request_, other->util_request_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UtilRequest::GetMetadata() const {
  protobuf_lookup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lookup_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UtilRequest

// bool util_request = 1;
void UtilRequest::clear_util_request() {
  util_request_ = false;
}
bool UtilRequest::util_request() const {
  // @@protoc_insertion_point(field_get:lookup.UtilRequest.util_request)
  return util_request_;
}
void UtilRequest::set_util_request(bool value) {
  
  util_request_ = value;
  // @@protoc_insertion_point(field_set:lookup.UtilRequest.util_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Key::kOperationFieldNumber;
const int Key::kKeyFieldNumber;
const int Key::kValueFieldNumber;
const int Key::kUtilRequestFieldNumber;
const int Key::kRequestIdFieldNumber;
const int Key::kIndexViewFieldNumber;
const int Key::kLookupServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Key::Key()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lookup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lookup.Key)
}
Key::Key(const Key& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_util_request()) {
    util_request_ = new ::lookup::UtilRequest(*from.util_request_);
  } else {
    util_request_ = NULL;
  }
  ::memcpy(&operation_, &from.operation_,
    reinterpret_cast<char*>(&index_view_) -
    reinterpret_cast<char*>(&operation_) + sizeof(index_view_));
  // @@protoc_insertion_point(copy_constructor:lookup.Key)
}

void Key::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&util_request_, 0, reinterpret_cast<char*>(&index_view_) -
    reinterpret_cast<char*>(&util_request_) + sizeof(index_view_));
  _cached_size_ = 0;
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:lookup.Key)
  SharedDtor();
}

void Key::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete util_request_;
  }
}

void Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Key::descriptor() {
  protobuf_lookup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lookup_2eproto::file_level_metadata[1].descriptor;
}

const Key& Key::default_instance() {
  protobuf_lookup_2eproto::InitDefaults();
  return *internal_default_instance();
}

Key* Key::New(::google::protobuf::Arena* arena) const {
  Key* n = new Key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:lookup.Key)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && util_request_ != NULL) {
    delete util_request_;
  }
  util_request_ = NULL;
  ::memset(&operation_, 0, reinterpret_cast<char*>(&index_view_) -
    reinterpret_cast<char*>(&operation_) + sizeof(index_view_));
}

bool Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lookup.Key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 operation = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lookup.Key.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lookup.Key.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lookup.UtilRequest util_request = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_util_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 request_id = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index_view = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_view_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lookup_server_id = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lookup_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lookup.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lookup.Key)
  return false;
#undef DO_
}

void Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lookup.Key)
  // uint32 operation = 1;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->operation(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lookup.Key.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lookup.Key.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // .lookup.UtilRequest util_request = 4;
  if (this->has_util_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->util_request_, output);
  }

  // uint64 request_id = 5;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->request_id(), output);
  }

  // uint64 index_view = 6;
  if (this->index_view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->index_view(), output);
  }

  // uint32 lookup_server_id = 7;
  if (this->lookup_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lookup_server_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:lookup.Key)
}

::google::protobuf::uint8* Key::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lookup.Key)
  // uint32 operation = 1;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->operation(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lookup.Key.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lookup.Key.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // .lookup.UtilRequest util_request = 4;
  if (this->has_util_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->util_request_, false, target);
  }

  // uint64 request_id = 5;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->request_id(), target);
  }

  // uint64 index_view = 6;
  if (this->index_view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->index_view(), target);
  }

  // uint32 lookup_server_id = 7;
  if (this->lookup_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lookup_server_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lookup.Key)
  return target;
}

size_t Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lookup.Key)
  size_t total_size = 0;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .lookup.UtilRequest util_request = 4;
  if (this->has_util_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->util_request_);
  }

  // uint32 operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->operation());
  }

  // uint32 lookup_server_id = 7;
  if (this->lookup_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lookup_server_id());
  }

  // uint64 request_id = 5;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_id());
  }

  // uint64 index_view = 6;
  if (this->index_view() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index_view());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Key::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lookup.Key)
  GOOGLE_DCHECK_NE(&from, this);
  const Key* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Key>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lookup.Key)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lookup.Key)
    MergeFrom(*source);
  }
}

void Key::MergeFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lookup.Key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_util_request()) {
    mutable_util_request()->::lookup::UtilRequest::MergeFrom(from.util_request());
  }
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.lookup_server_id() != 0) {
    set_lookup_server_id(from.lookup_server_id());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.index_view() != 0) {
    set_index_view(from.index_view());
  }
}

void Key::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lookup.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lookup.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {
  return true;
}

void Key::Swap(Key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Key::InternalSwap(Key* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(util_request_, other->util_request_);
  std::swap(operation_, other->operation_);
  std::swap(lookup_server_id_, other->lookup_server_id_);
  std::swap(request_id_, other->request_id_);
  std::swap(index_view_, other->index_view_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Key::GetMetadata() const {
  protobuf_lookup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lookup_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Key

// uint32 operation = 1;
void Key::clear_operation() {
  operation_ = 0u;
}
::google::protobuf::uint32 Key::operation() const {
  // @@protoc_insertion_point(field_get:lookup.Key.operation)
  return operation_;
}
void Key::set_operation(::google::protobuf::uint32 value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:lookup.Key.operation)
}

// string key = 2;
void Key::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Key::key() const {
  // @@protoc_insertion_point(field_get:lookup.Key.key)
  return key_.GetNoArena();
}
void Key::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lookup.Key.key)
}
#if LANG_CXX11
void Key::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lookup.Key.key)
}
#endif
void Key::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lookup.Key.key)
}
void Key::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lookup.Key.key)
}
::std::string* Key::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:lookup.Key.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Key::release_key() {
  // @@protoc_insertion_point(field_release:lookup.Key.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Key::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:lookup.Key.key)
}

// string value = 3;
void Key::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Key::value() const {
  // @@protoc_insertion_point(field_get:lookup.Key.value)
  return value_.GetNoArena();
}
void Key::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lookup.Key.value)
}
#if LANG_CXX11
void Key::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lookup.Key.value)
}
#endif
void Key::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lookup.Key.value)
}
void Key::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lookup.Key.value)
}
::std::string* Key::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:lookup.Key.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Key::release_value() {
  // @@protoc_insertion_point(field_release:lookup.Key.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Key::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:lookup.Key.value)
}

// .lookup.UtilRequest util_request = 4;
bool Key::has_util_request() const {
  return this != internal_default_instance() && util_request_ != NULL;
}
void Key::clear_util_request() {
  if (GetArenaNoVirtual() == NULL && util_request_ != NULL) delete util_request_;
  util_request_ = NULL;
}
const ::lookup::UtilRequest& Key::util_request() const {
  // @@protoc_insertion_point(field_get:lookup.Key.util_request)
  return util_request_ != NULL ? *util_request_
                         : *::lookup::UtilRequest::internal_default_instance();
}
::lookup::UtilRequest* Key::mutable_util_request() {
  
  if (util_request_ == NULL) {
    util_request_ = new ::lookup::UtilRequest;
  }
  // @@protoc_insertion_point(field_mutable:lookup.Key.util_request)
  return util_request_;
}
::lookup::UtilRequest* Key::release_util_request() {
  // @@protoc_insertion_point(field_release:lookup.Key.util_request)
  
  ::lookup::UtilRequest* temp = util_request_;
  util_request_ = NULL;
  return temp;
}
void Key::set_allocated_util_request(::lookup::UtilRequest* util_request) {
  delete util_request_;
  util_request_ = util_request;
  if (util_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lookup.Key.util_request)
}

// uint64 request_id = 5;
void Key::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Key::request_id() const {
  // @@protoc_insertion_point(field_get:lookup.Key.request_id)
  return request_id_;
}
void Key::set_request_id(::google::protobuf::uint64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:lookup.Key.request_id)
}

// uint64 index_view = 6;
void Key::clear_index_view() {
  index_view_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Key::index_view() const {
  // @@protoc_insertion_point(field_get:lookup.Key.index_view)
  return index_view_;
}
void Key::set_index_view(::google::protobuf::uint64 value) {
  
  index_view_ = value;
  // @@protoc_insertion_point(field_set:lookup.Key.index_view)
}

// uint32 lookup_server_id = 7;
void Key::clear_lookup_server_id() {
  lookup_server_id_ = 0u;
}
::google::protobuf::uint32 Key::lookup_server_id() const {
  // @@protoc_insertion_point(field_get:lookup.Key.lookup_server_id)
  return lookup_server_id_;
}
void Key::set_lookup_server_id(::google::protobuf::uint32 value) {
  
  lookup_server_id_ = value;
  // @@protoc_insertion_point(field_set:lookup.Key.lookup_server_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimingDataInMicro::kUnpackLookupSrvReqTimeInMicroFieldNumber;
const int TimingDataInMicro::kLookupSrvTimeInMicroFieldNumber;
const int TimingDataInMicro::kPackLookupSrvRespTimeInMicroFieldNumber;
const int TimingDataInMicro::kCpuUtilFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimingDataInMicro::TimingDataInMicro()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lookup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lookup.TimingDataInMicro)
}
TimingDataInMicro::TimingDataInMicro(const TimingDataInMicro& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unpack_lookup_srv_req_time_in_micro_, &from.unpack_lookup_srv_req_time_in_micro_,
    reinterpret_cast<char*>(&cpu_util_) -
    reinterpret_cast<char*>(&unpack_lookup_srv_req_time_in_micro_) + sizeof(cpu_util_));
  // @@protoc_insertion_point(copy_constructor:lookup.TimingDataInMicro)
}

void TimingDataInMicro::SharedCtor() {
  ::memset(&unpack_lookup_srv_req_time_in_micro_, 0, reinterpret_cast<char*>(&cpu_util_) -
    reinterpret_cast<char*>(&unpack_lookup_srv_req_time_in_micro_) + sizeof(cpu_util_));
  _cached_size_ = 0;
}

TimingDataInMicro::~TimingDataInMicro() {
  // @@protoc_insertion_point(destructor:lookup.TimingDataInMicro)
  SharedDtor();
}

void TimingDataInMicro::SharedDtor() {
}

void TimingDataInMicro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimingDataInMicro::descriptor() {
  protobuf_lookup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lookup_2eproto::file_level_metadata[2].descriptor;
}

const TimingDataInMicro& TimingDataInMicro::default_instance() {
  protobuf_lookup_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimingDataInMicro* TimingDataInMicro::New(::google::protobuf::Arena* arena) const {
  TimingDataInMicro* n = new TimingDataInMicro;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimingDataInMicro::Clear() {
// @@protoc_insertion_point(message_clear_start:lookup.TimingDataInMicro)
  ::memset(&unpack_lookup_srv_req_time_in_micro_, 0, reinterpret_cast<char*>(&cpu_util_) -
    reinterpret_cast<char*>(&unpack_lookup_srv_req_time_in_micro_) + sizeof(cpu_util_));
}

bool TimingDataInMicro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lookup.TimingDataInMicro)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 unpack_lookup_srv_req_time_in_micro = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unpack_lookup_srv_req_time_in_micro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lookup_srv_time_in_micro = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lookup_srv_time_in_micro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 pack_lookup_srv_resp_time_in_micro = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pack_lookup_srv_resp_time_in_micro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cpu_util = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_util_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lookup.TimingDataInMicro)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lookup.TimingDataInMicro)
  return false;
#undef DO_
}

void TimingDataInMicro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lookup.TimingDataInMicro)
  // uint64 unpack_lookup_srv_req_time_in_micro = 1;
  if (this->unpack_lookup_srv_req_time_in_micro() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->unpack_lookup_srv_req_time_in_micro(), output);
  }

  // uint64 lookup_srv_time_in_micro = 2;
  if (this->lookup_srv_time_in_micro() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lookup_srv_time_in_micro(), output);
  }

  // uint64 pack_lookup_srv_resp_time_in_micro = 3;
  if (this->pack_lookup_srv_resp_time_in_micro() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pack_lookup_srv_resp_time_in_micro(), output);
  }

  // float cpu_util = 4;
  if (this->cpu_util() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cpu_util(), output);
  }

  // @@protoc_insertion_point(serialize_end:lookup.TimingDataInMicro)
}

::google::protobuf::uint8* TimingDataInMicro::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lookup.TimingDataInMicro)
  // uint64 unpack_lookup_srv_req_time_in_micro = 1;
  if (this->unpack_lookup_srv_req_time_in_micro() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->unpack_lookup_srv_req_time_in_micro(), target);
  }

  // uint64 lookup_srv_time_in_micro = 2;
  if (this->lookup_srv_time_in_micro() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lookup_srv_time_in_micro(), target);
  }

  // uint64 pack_lookup_srv_resp_time_in_micro = 3;
  if (this->pack_lookup_srv_resp_time_in_micro() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pack_lookup_srv_resp_time_in_micro(), target);
  }

  // float cpu_util = 4;
  if (this->cpu_util() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cpu_util(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lookup.TimingDataInMicro)
  return target;
}

size_t TimingDataInMicro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lookup.TimingDataInMicro)
  size_t total_size = 0;

  // uint64 unpack_lookup_srv_req_time_in_micro = 1;
  if (this->unpack_lookup_srv_req_time_in_micro() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unpack_lookup_srv_req_time_in_micro());
  }

  // uint64 lookup_srv_time_in_micro = 2;
  if (this->lookup_srv_time_in_micro() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lookup_srv_time_in_micro());
  }

  // uint64 pack_lookup_srv_resp_time_in_micro = 3;
  if (this->pack_lookup_srv_resp_time_in_micro() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pack_lookup_srv_resp_time_in_micro());
  }

  // float cpu_util = 4;
  if (this->cpu_util() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimingDataInMicro::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lookup.TimingDataInMicro)
  GOOGLE_DCHECK_NE(&from, this);
  const TimingDataInMicro* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimingDataInMicro>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lookup.TimingDataInMicro)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lookup.TimingDataInMicro)
    MergeFrom(*source);
  }
}

void TimingDataInMicro::MergeFrom(const TimingDataInMicro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lookup.TimingDataInMicro)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.unpack_lookup_srv_req_time_in_micro() != 0) {
    set_unpack_lookup_srv_req_time_in_micro(from.unpack_lookup_srv_req_time_in_micro());
  }
  if (from.lookup_srv_time_in_micro() != 0) {
    set_lookup_srv_time_in_micro(from.lookup_srv_time_in_micro());
  }
  if (from.pack_lookup_srv_resp_time_in_micro() != 0) {
    set_pack_lookup_srv_resp_time_in_micro(from.pack_lookup_srv_resp_time_in_micro());
  }
  if (from.cpu_util() != 0) {
    set_cpu_util(from.cpu_util());
  }
}

void TimingDataInMicro::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lookup.TimingDataInMicro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimingDataInMicro::CopyFrom(const TimingDataInMicro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lookup.TimingDataInMicro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimingDataInMicro::IsInitialized() const {
  return true;
}

void TimingDataInMicro::Swap(TimingDataInMicro* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimingDataInMicro::InternalSwap(TimingDataInMicro* other) {
  std::swap(unpack_lookup_srv_req_time_in_micro_, other->unpack_lookup_srv_req_time_in_micro_);
  std::swap(lookup_srv_time_in_micro_, other->lookup_srv_time_in_micro_);
  std::swap(pack_lookup_srv_resp_time_in_micro_, other->pack_lookup_srv_resp_time_in_micro_);
  std::swap(cpu_util_, other->cpu_util_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimingDataInMicro::GetMetadata() const {
  protobuf_lookup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lookup_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimingDataInMicro

// uint64 unpack_lookup_srv_req_time_in_micro = 1;
void TimingDataInMicro::clear_unpack_lookup_srv_req_time_in_micro() {
  unpack_lookup_srv_req_time_in_micro_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TimingDataInMicro::unpack_lookup_srv_req_time_in_micro() const {
  // @@protoc_insertion_point(field_get:lookup.TimingDataInMicro.unpack_lookup_srv_req_time_in_micro)
  return unpack_lookup_srv_req_time_in_micro_;
}
void TimingDataInMicro::set_unpack_lookup_srv_req_time_in_micro(::google::protobuf::uint64 value) {
  
  unpack_lookup_srv_req_time_in_micro_ = value;
  // @@protoc_insertion_point(field_set:lookup.TimingDataInMicro.unpack_lookup_srv_req_time_in_micro)
}

// uint64 lookup_srv_time_in_micro = 2;
void TimingDataInMicro::clear_lookup_srv_time_in_micro() {
  lookup_srv_time_in_micro_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TimingDataInMicro::lookup_srv_time_in_micro() const {
  // @@protoc_insertion_point(field_get:lookup.TimingDataInMicro.lookup_srv_time_in_micro)
  return lookup_srv_time_in_micro_;
}
void TimingDataInMicro::set_lookup_srv_time_in_micro(::google::protobuf::uint64 value) {
  
  lookup_srv_time_in_micro_ = value;
  // @@protoc_insertion_point(field_set:lookup.TimingDataInMicro.lookup_srv_time_in_micro)
}

// uint64 pack_lookup_srv_resp_time_in_micro = 3;
void TimingDataInMicro::clear_pack_lookup_srv_resp_time_in_micro() {
  pack_lookup_srv_resp_time_in_micro_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TimingDataInMicro::pack_lookup_srv_resp_time_in_micro() const {
  // @@protoc_insertion_point(field_get:lookup.TimingDataInMicro.pack_lookup_srv_resp_time_in_micro)
  return pack_lookup_srv_resp_time_in_micro_;
}
void TimingDataInMicro::set_pack_lookup_srv_resp_time_in_micro(::google::protobuf::uint64 value) {
  
  pack_lookup_srv_resp_time_in_micro_ = value;
  // @@protoc_insertion_point(field_set:lookup.TimingDataInMicro.pack_lookup_srv_resp_time_in_micro)
}

// float cpu_util = 4;
void TimingDataInMicro::clear_cpu_util() {
  cpu_util_ = 0;
}
float TimingDataInMicro::cpu_util() const {
  // @@protoc_insertion_point(field_get:lookup.TimingDataInMicro.cpu_util)
  return cpu_util_;
}
void TimingDataInMicro::set_cpu_util(float value) {
  
  cpu_util_ = value;
  // @@protoc_insertion_point(field_set:lookup.TimingDataInMicro.cpu_util)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UtilResponse::kUtilPresentFieldNumber;
const int UtilResponse::kUserTimeFieldNumber;
const int UtilResponse::kSystemTimeFieldNumber;
const int UtilResponse::kIoTimeFieldNumber;
const int UtilResponse::kIdleTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UtilResponse::UtilResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lookup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lookup.UtilResponse)
}
UtilResponse::UtilResponse(const UtilResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_time_, &from.user_time_,
    reinterpret_cast<char*>(&util_present_) -
    reinterpret_cast<char*>(&user_time_) + sizeof(util_present_));
  // @@protoc_insertion_point(copy_constructor:lookup.UtilResponse)
}

void UtilResponse::SharedCtor() {
  ::memset(&user_time_, 0, reinterpret_cast<char*>(&util_present_) -
    reinterpret_cast<char*>(&user_time_) + sizeof(util_present_));
  _cached_size_ = 0;
}

UtilResponse::~UtilResponse() {
  // @@protoc_insertion_point(destructor:lookup.UtilResponse)
  SharedDtor();
}

void UtilResponse::SharedDtor() {
}

void UtilResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UtilResponse::descriptor() {
  protobuf_lookup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lookup_2eproto::file_level_metadata[3].descriptor;
}

const UtilResponse& UtilResponse::default_instance() {
  protobuf_lookup_2eproto::InitDefaults();
  return *internal_default_instance();
}

UtilResponse* UtilResponse::New(::google::protobuf::Arena* arena) const {
  UtilResponse* n = new UtilResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UtilResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lookup.UtilResponse)
  ::memset(&user_time_, 0, reinterpret_cast<char*>(&util_present_) -
    reinterpret_cast<char*>(&user_time_) + sizeof(util_present_));
}

bool UtilResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lookup.UtilResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool util_present = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &util_present_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_time = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 system_time = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &system_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 io_time = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &io_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 idle_time = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idle_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lookup.UtilResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lookup.UtilResponse)
  return false;
#undef DO_
}

void UtilResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lookup.UtilResponse)
  // bool util_present = 1;
  if (this->util_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->util_present(), output);
  }

  // uint64 user_time = 2;
  if (this->user_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_time(), output);
  }

  // uint64 system_time = 3;
  if (this->system_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->system_time(), output);
  }

  // uint64 io_time = 4;
  if (this->io_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->io_time(), output);
  }

  // uint64 idle_time = 5;
  if (this->idle_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->idle_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:lookup.UtilResponse)
}

::google::protobuf::uint8* UtilResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lookup.UtilResponse)
  // bool util_present = 1;
  if (this->util_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->util_present(), target);
  }

  // uint64 user_time = 2;
  if (this->user_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_time(), target);
  }

  // uint64 system_time = 3;
  if (this->system_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->system_time(), target);
  }

  // uint64 io_time = 4;
  if (this->io_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->io_time(), target);
  }

  // uint64 idle_time = 5;
  if (this->idle_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->idle_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lookup.UtilResponse)
  return target;
}

size_t UtilResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lookup.UtilResponse)
  size_t total_size = 0;

  // uint64 user_time = 2;
  if (this->user_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_time());
  }

  // uint64 system_time = 3;
  if (this->system_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->system_time());
  }

  // uint64 io_time = 4;
  if (this->io_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->io_time());
  }

  // uint64 idle_time = 5;
  if (this->idle_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->idle_time());
  }

  // bool util_present = 1;
  if (this->util_present() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UtilResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lookup.UtilResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UtilResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UtilResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lookup.UtilResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lookup.UtilResponse)
    MergeFrom(*source);
  }
}

void UtilResponse::MergeFrom(const UtilResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lookup.UtilResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.user_time() != 0) {
    set_user_time(from.user_time());
  }
  if (from.system_time() != 0) {
    set_system_time(from.system_time());
  }
  if (from.io_time() != 0) {
    set_io_time(from.io_time());
  }
  if (from.idle_time() != 0) {
    set_idle_time(from.idle_time());
  }
  if (from.util_present() != 0) {
    set_util_present(from.util_present());
  }
}

void UtilResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lookup.UtilResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtilResponse::CopyFrom(const UtilResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lookup.UtilResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtilResponse::IsInitialized() const {
  return true;
}

void UtilResponse::Swap(UtilResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UtilResponse::InternalSwap(UtilResponse* other) {
  std::swap(user_time_, other->user_time_);
  std::swap(system_time_, other->system_time_);
  std::swap(io_time_, other->io_time_);
  std::swap(idle_time_, other->idle_time_);
  std::swap(util_present_, other->util_present_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UtilResponse::GetMetadata() const {
  protobuf_lookup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lookup_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UtilResponse

// bool util_present = 1;
void UtilResponse::clear_util_present() {
  util_present_ = false;
}
bool UtilResponse::util_present() const {
  // @@protoc_insertion_point(field_get:lookup.UtilResponse.util_present)
  return util_present_;
}
void UtilResponse::set_util_present(bool value) {
  
  util_present_ = value;
  // @@protoc_insertion_point(field_set:lookup.UtilResponse.util_present)
}

// uint64 user_time = 2;
void UtilResponse::clear_user_time() {
  user_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UtilResponse::user_time() const {
  // @@protoc_insertion_point(field_get:lookup.UtilResponse.user_time)
  return user_time_;
}
void UtilResponse::set_user_time(::google::protobuf::uint64 value) {
  
  user_time_ = value;
  // @@protoc_insertion_point(field_set:lookup.UtilResponse.user_time)
}

// uint64 system_time = 3;
void UtilResponse::clear_system_time() {
  system_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UtilResponse::system_time() const {
  // @@protoc_insertion_point(field_get:lookup.UtilResponse.system_time)
  return system_time_;
}
void UtilResponse::set_system_time(::google::protobuf::uint64 value) {
  
  system_time_ = value;
  // @@protoc_insertion_point(field_set:lookup.UtilResponse.system_time)
}

// uint64 io_time = 4;
void UtilResponse::clear_io_time() {
  io_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UtilResponse::io_time() const {
  // @@protoc_insertion_point(field_get:lookup.UtilResponse.io_time)
  return io_time_;
}
void UtilResponse::set_io_time(::google::protobuf::uint64 value) {
  
  io_time_ = value;
  // @@protoc_insertion_point(field_set:lookup.UtilResponse.io_time)
}

// uint64 idle_time = 5;
void UtilResponse::clear_idle_time() {
  idle_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UtilResponse::idle_time() const {
  // @@protoc_insertion_point(field_get:lookup.UtilResponse.idle_time)
  return idle_time_;
}
void UtilResponse::set_idle_time(::google::protobuf::uint64 value) {
  
  idle_time_ = value;
  // @@protoc_insertion_point(field_set:lookup.UtilResponse.idle_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kValueFieldNumber;
const int Value::kTimingDataInMicroFieldNumber;
const int Value::kUtilResponseFieldNumber;
const int Value::kRequestIdFieldNumber;
const int Value::kRecvStampFieldNumber;
const int Value::kSendStampFieldNumber;
const int Value::kIndexViewFieldNumber;
const int Value::kBucketServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lookup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lookup.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_timing_data_in_micro()) {
    timing_data_in_micro_ = new ::lookup::TimingDataInMicro(*from.timing_data_in_micro_);
  } else {
    timing_data_in_micro_ = NULL;
  }
  if (from.has_util_response()) {
    util_response_ = new ::lookup::UtilResponse(*from.util_response_);
  } else {
    util_response_ = NULL;
  }
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&bucket_server_id_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(bucket_server_id_));
  // @@protoc_insertion_point(copy_constructor:lookup.Value)
}

void Value::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timing_data_in_micro_, 0, reinterpret_cast<char*>(&bucket_server_id_) -
    reinterpret_cast<char*>(&timing_data_in_micro_) + sizeof(bucket_server_id_));
  _cached_size_ = 0;
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:lookup.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete timing_data_in_micro_;
  }
  if (this != internal_default_instance()) {
    delete util_response_;
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_lookup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lookup_2eproto::file_level_metadata[4].descriptor;
}

const Value& Value::default_instance() {
  protobuf_lookup_2eproto::InitDefaults();
  return *internal_default_instance();
}

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:lookup.Value)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timing_data_in_micro_ != NULL) {
    delete timing_data_in_micro_;
  }
  timing_data_in_micro_ = NULL;
  if (GetArenaNoVirtual() == NULL && util_response_ != NULL) {
    delete util_response_;
  }
  util_response_ = NULL;
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&bucket_server_id_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(bucket_server_id_));
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lookup.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lookup.Value.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lookup.TimingDataInMicro timing_data_in_micro = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timing_data_in_micro()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lookup.UtilResponse util_response = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_util_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 request_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 recv_stamp = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recv_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 send_stamp = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index_view = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_view_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bucket_server_id = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lookup.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lookup.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lookup.Value)
  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lookup.Value.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // .lookup.TimingDataInMicro timing_data_in_micro = 2;
  if (this->has_timing_data_in_micro()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timing_data_in_micro_, output);
  }

  // .lookup.UtilResponse util_response = 3;
  if (this->has_util_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->util_response_, output);
  }

  // uint64 request_id = 4;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->request_id(), output);
  }

  // uint64 recv_stamp = 5;
  if (this->recv_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->recv_stamp(), output);
  }

  // uint64 send_stamp = 6;
  if (this->send_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->send_stamp(), output);
  }

  // uint64 index_view = 7;
  if (this->index_view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->index_view(), output);
  }

  // uint32 bucket_server_id = 8;
  if (this->bucket_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bucket_server_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:lookup.Value)
}

::google::protobuf::uint8* Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lookup.Value)
  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lookup.Value.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // .lookup.TimingDataInMicro timing_data_in_micro = 2;
  if (this->has_timing_data_in_micro()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->timing_data_in_micro_, false, target);
  }

  // .lookup.UtilResponse util_response = 3;
  if (this->has_util_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->util_response_, false, target);
  }

  // uint64 request_id = 4;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->request_id(), target);
  }

  // uint64 recv_stamp = 5;
  if (this->recv_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->recv_stamp(), target);
  }

  // uint64 send_stamp = 6;
  if (this->send_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->send_stamp(), target);
  }

  // uint64 index_view = 7;
  if (this->index_view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->index_view(), target);
  }

  // uint32 bucket_server_id = 8;
  if (this->bucket_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bucket_server_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lookup.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lookup.Value)
  size_t total_size = 0;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .lookup.TimingDataInMicro timing_data_in_micro = 2;
  if (this->has_timing_data_in_micro()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timing_data_in_micro_);
  }

  // .lookup.UtilResponse util_response = 3;
  if (this->has_util_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->util_response_);
  }

  // uint64 request_id = 4;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_id());
  }

  // uint64 recv_stamp = 5;
  if (this->recv_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->recv_stamp());
  }

  // uint64 send_stamp = 6;
  if (this->send_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_stamp());
  }

  // uint64 index_view = 7;
  if (this->index_view() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index_view());
  }

  // uint32 bucket_server_id = 8;
  if (this->bucket_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bucket_server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lookup.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lookup.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lookup.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lookup.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_timing_data_in_micro()) {
    mutable_timing_data_in_micro()->::lookup::TimingDataInMicro::MergeFrom(from.timing_data_in_micro());
  }
  if (from.has_util_response()) {
    mutable_util_response()->::lookup::UtilResponse::MergeFrom(from.util_response());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.recv_stamp() != 0) {
    set_recv_stamp(from.recv_stamp());
  }
  if (from.send_stamp() != 0) {
    set_send_stamp(from.send_stamp());
  }
  if (from.index_view() != 0) {
    set_index_view(from.index_view());
  }
  if (from.bucket_server_id() != 0) {
    set_bucket_server_id(from.bucket_server_id());
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lookup.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lookup.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  value_.Swap(&other->value_);
  std::swap(timing_data_in_micro_, other->timing_data_in_micro_);
  std::swap(util_response_, other->util_response_);
  std::swap(request_id_, other->request_id_);
  std::swap(recv_stamp_, other->recv_stamp_);
  std::swap(send_stamp_, other->send_stamp_);
  std::swap(index_view_, other->index_view_);
  std::swap(bucket_server_id_, other->bucket_server_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_lookup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lookup_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// string value = 1;
void Value::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Value::value() const {
  // @@protoc_insertion_point(field_get:lookup.Value.value)
  return value_.GetNoArena();
}
void Value::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lookup.Value.value)
}
#if LANG_CXX11
void Value::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lookup.Value.value)
}
#endif
void Value::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lookup.Value.value)
}
void Value::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lookup.Value.value)
}
::std::string* Value::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:lookup.Value.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Value::release_value() {
  // @@protoc_insertion_point(field_release:lookup.Value.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Value::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:lookup.Value.value)
}

// .lookup.TimingDataInMicro timing_data_in_micro = 2;
bool Value::has_timing_data_in_micro() const {
  return this != internal_default_instance() && timing_data_in_micro_ != NULL;
}
void Value::clear_timing_data_in_micro() {
  if (GetArenaNoVirtual() == NULL && timing_data_in_micro_ != NULL) delete timing_data_in_micro_;
  timing_data_in_micro_ = NULL;
}
const ::lookup::TimingDataInMicro& Value::timing_data_in_micro() const {
  // @@protoc_insertion_point(field_get:lookup.Value.timing_data_in_micro)
  return timing_data_in_micro_ != NULL ? *timing_data_in_micro_
                         : *::lookup::TimingDataInMicro::internal_default_instance();
}
::lookup::TimingDataInMicro* Value::mutable_timing_data_in_micro() {
  
  if (timing_data_in_micro_ == NULL) {
    timing_data_in_micro_ = new ::lookup::TimingDataInMicro;
  }
  // @@protoc_insertion_point(field_mutable:lookup.Value.timing_data_in_micro)
  return timing_data_in_micro_;
}
::lookup::TimingDataInMicro* Value::release_timing_data_in_micro() {
  // @@protoc_insertion_point(field_release:lookup.Value.timing_data_in_micro)
  
  ::lookup::TimingDataInMicro* temp = timing_data_in_micro_;
  timing_data_in_micro_ = NULL;
  return temp;
}
void Value::set_allocated_timing_data_in_micro(::lookup::TimingDataInMicro* timing_data_in_micro) {
  delete timing_data_in_micro_;
  timing_data_in_micro_ = timing_data_in_micro;
  if (timing_data_in_micro) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lookup.Value.timing_data_in_micro)
}

// .lookup.UtilResponse util_response = 3;
bool Value::has_util_response() const {
  return this != internal_default_instance() && util_response_ != NULL;
}
void Value::clear_util_response() {
  if (GetArenaNoVirtual() == NULL && util_response_ != NULL) delete util_response_;
  util_response_ = NULL;
}
const ::lookup::UtilResponse& Value::util_response() const {
  // @@protoc_insertion_point(field_get:lookup.Value.util_response)
  return util_response_ != NULL ? *util_response_
                         : *::lookup::UtilResponse::internal_default_instance();
}
::lookup::UtilResponse* Value::mutable_util_response() {
  
  if (util_response_ == NULL) {
    util_response_ = new ::lookup::UtilResponse;
  }
  // @@protoc_insertion_point(field_mutable:lookup.Value.util_response)
  return util_response_;
}
::lookup::UtilResponse* Value::release_util_response() {
  // @@protoc_insertion_point(field_release:lookup.Value.util_response)
  
  ::lookup::UtilResponse* temp = util_response_;
  util_response_ = NULL;
  return temp;
}
void Value::set_allocated_util_response(::lookup::UtilResponse* util_response) {
  delete util_response_;
  util_response_ = util_response;
  if (util_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lookup.Value.util_response)
}

// uint64 request_id = 4;
void Value::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Value::request_id() const {
  // @@protoc_insertion_point(field_get:lookup.Value.request_id)
  return request_id_;
}
void Value::set_request_id(::google::protobuf::uint64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:lookup.Value.request_id)
}

// uint64 recv_stamp = 5;
void Value::clear_recv_stamp() {
  recv_stamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Value::recv_stamp() const {
  // @@protoc_insertion_point(field_get:lookup.Value.recv_stamp)
  return recv_stamp_;
}
void Value::set_recv_stamp(::google::protobuf::uint64 value) {
  
  recv_stamp_ = value;
  // @@protoc_insertion_point(field_set:lookup.Value.recv_stamp)
}

// uint64 send_stamp = 6;
void Value::clear_send_stamp() {
  send_stamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Value::send_stamp() const {
  // @@protoc_insertion_point(field_get:lookup.Value.send_stamp)
  return send_stamp_;
}
void Value::set_send_stamp(::google::protobuf::uint64 value) {
  
  send_stamp_ = value;
  // @@protoc_insertion_point(field_set:lookup.Value.send_stamp)
}

// uint64 index_view = 7;
void Value::clear_index_view() {
  index_view_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Value::index_view() const {
  // @@protoc_insertion_point(field_get:lookup.Value.index_view)
  return index_view_;
}
void Value::set_index_view(::google::protobuf::uint64 value) {
  
  index_view_ = value;
  // @@protoc_insertion_point(field_set:lookup.Value.index_view)
}

// uint32 bucket_server_id = 8;
void Value::clear_bucket_server_id() {
  bucket_server_id_ = 0u;
}
::google::protobuf::uint32 Value::bucket_server_id() const {
  // @@protoc_insertion_point(field_get:lookup.Value.bucket_server_id)
  return bucket_server_id_;
}
void Value::set_bucket_server_id(::google::protobuf::uint32 value) {
  
  bucket_server_id_ = value;
  // @@protoc_insertion_point(field_set:lookup.Value.bucket_server_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lookup

// @@protoc_insertion_point(global_scope)
