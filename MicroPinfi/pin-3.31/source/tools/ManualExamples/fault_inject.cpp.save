#include "pin.H"
#include <iostream>
#include <cstdlib>
#include <ctime>
#include "xed-category-enum.h"
#include <fstream> // For file operations
std::ofstream injection_commands;

#define LOGOUT std::cout

bool isValidInst(INS ins) {
/**
 * IMPORTANT: This is to make sure fault injections are done at the .text 
 * of the compiled code, instead of at libraries or .init/.fini sections
 */
  if (!RTN_Valid(INS_Rtn(ins))) { // some library instructions do not have rtn !?
    LOG("Invalid RTN " + INS_Disassemble(ins) + "\n");
    return false;
  }
  
  if (!IMG_IsMainExecutable(SEC_Img(RTN_Sec(INS_Rtn(ins))))) {
    //LOG("Libraries " + IMG_Name(SEC_Img(RTN_Sec(INS_Rtn(ins)))) + "\n");
    return false;
  }
  if (SEC_Name(RTN_Sec(INS_Rtn(ins))) != ".text") {
    //LOG("Section: " + SEC_Name(RTN_Sec(INS_Rtn(ins))) + "\n");
    return false;
  }
  std::string rtnname = RTN_Name(INS_Rtn(ins));
  if (rtnname.find("__libc") == 0 || rtnname.find("_start") == 0 ||
      rtnname.find("call_gmon_start") == 0 || rtnname.find("frame_dummy") == 0 ||
      rtnname.find("__do_global") == 0 || rtnname.find("__stat") == 0) {
    return false;
  }
  LOG("Exe " + RTN_Name(INS_Rtn(ins)) + "\n");

	REG reg = INS_RegW(ins, 0);
	if(!REG_valid(reg))
		return false;
  
  return true;
}



// Function to check if an instruction belongs to arithmetic or logic operations
bool IsArithmeticLogicInstruction(INS ins) {
    xed_category_enum_t category = static_cast<xed_category_enum_t>(INS_Category(ins));
    return category == XED_CATEGORY_LOGICAL || 
    category == XED_CATEGORY_BITBYTE || 
    category == XED_CATEGORY_ROTATE || 
    category == XED_CATEGORY_SHIFT || 
    category == XED_CATEGORY_BMI1 || 
    category == XED_CATEGORY_BMI2 || 
    category == XED_CATEGORY_X87_ALU || 
    category == XED_CATEGORY_FMA4 || 
    category == XED_CATEGORY_FP16 || 
    category == XED_CATEGORY_VFMA||
    category ==XED_CATEGORY_BINARY||
    category ==XED_CATEGORY_SSE||
    category ==XED_CATEGORY_LOGICAL_FP;//CONVERT,SETCC
}


bool isDoublePrecission(INS ins){
    std::string mnemonic = INS_Mnemonic(ins);
    return mnemonic == "ADDSD" ||
           mnemonic == "SUBSD" ||
           mnemonic == "MULSD" ||
           mnemonic == "DIVSD" ||
           mnemonic == "SQRTSD" ||
}
bool isSinglePrecision(INS ins) {
    std::string mnemonic = INS_Mnemonic(ins);
    return mnemonic == "ADDSS" ||
           mnemonic == "SUBSS" ||
           mnemonic == "MULSS" ||
           mnemonic == "DIVSS" ||
           mnemonic == "SQRTSS";
}
bool isVectorDoublePrecision(INS ins) {
    std::string mnemonic = INS_Mnemonic(ins);
    return mnemonic == "ADDPD" ||
           mnemonic == "SUBPD" ||
           mnemonic == "MULPD" ||
           mnemonic == "DIVPD" ||
           mnemonic == "SQRTPD";
}
bool isVectorSinglePrecision(INS ins) {
    std::string mnemonic = INS_Mnemonic(ins);
    return mnemonic == "ADDPS" ||
           mnemonic == "SUBPS" ||
           mnemonic == "MULPS" ||
           mnemonic == "DIVPS" ||
           mnemonic == "SQRTPS";
}
/*
bool isMixedPrecision(INS ins) {
    std::string mnemonic = INS_Mnemonic(ins);
    return mnemonic == "ADDSUBPD" ||
           mnemonic == "ADDSUBPS";
}
*/



VOID InjectBitFlipFraction(ADDRINT ip, UINT32 regIndex, REG reg, CONTEXT *ctxt) {

        CHAR fpContextSpace[FPSTATE_SIZE];
        FPSTATE *fpContext = reinterpret_cast<FPSTATE *>(fpContextSpace);

        PIN_GetContextFPState(ctxt, fpContext);
//////////
        srand(time(0)); // Initialize random number generator
        reg = REG_FullRegName(reg); // Get the full register name
        ADDRINT regValue = PIN_GetContextReg(ctxt, reg); // Get the current register value

        // Select a random bit in the last 52 bits (fractional part of double precision)
        UINT32 injectBit = 12 + rand() % 52; // 12 MSBs reserved for exponent + sign
        ADDRINT mask = 1UL << injectBit; // Create a mask for the bit flip
        ADDRINT injectedValue = regValue ^ mask; // Apply the bit flip
        PIN_SetContextReg(ctxt, reg, injectedValue); // Update the register with the new value

        // Log the details of the injection
        injection_commands << "Injection at instruction: 0x" << std::hex << ip
                           << ", Register: " << REG_StringShort(reg)
                           << ", Original Value: 0x" << std::hex << regValue
                           << ", Mask: 0x" << std::hex << mask
                           << ", Injected Value: 0x" << std::hex << injectedValue
                           << std::endl;

        PIN_ExecuteAt(ctxt); // Resume execution
    }
}


// Injects a single bit flip into the specified register
VOID InjectBitFlip(ADDRINT ip, UINT32 regIndex, REG reg, CONTEXT *ctxt) {
    if(REG_valid(reg)){
    srand(time(0)); // Initialize random number generator
    reg = REG_FullRegName(reg);
    ADDRINT regValue = PIN_GetContextReg(ctxt, reg); // Get the current value of the register
    UINT32 injectBit = rand() % (sizeof(UINT32) * 8); // MOST SDCs FOUND ON LEAST SIGNIFICANT BITS(UINT32)
    ADDRINT mask = 1UL << injectBit; // Create a mask for the bit flip
    ADDRINT injectedValue = regValue ^ mask; // Apply the bit flip
    PIN_SetContextReg(ctxt, reg, injectedValue); // Update the register with the new value
    
    // Log the details of the injection// LOGOUT
    injection_commands << "Injection at instruction: 0x" << std::hex << ip
           << ", Register: " << REG_StringShort(reg)
           << ", Original Value: 0x" << std::hex << regValue
           << ", Mask: 0x" << std::hex << mask
           << ", Injected Value: 0x" << std::hex << injectedValue
           << std::endl;
    PIN_ExecuteAt(ctxt);
 }
}

// Instruments write registers of each instruction for fault injection
VOID InstructionInstrumentation(INS ins, VOID *v) {
    // Check if the instruction belongs to arithmetic or logic
    if (!isValidInst(ins))
        return;
    if (!(IsArithmeticLogicInstruction(ins))) // Select a r>) {
        return; // Skip non-arithmetic/logic instructions
    
    int numW = INS_MaxNumWRegs(ins); // Get the number of write registers for the instruction
    if (numW == 0) return; // Skip if no write registers are available

    int randW = rand() % numW; // Select a random write register
    int i=0;
    REG reg = INS_RegW(ins, randW); // Get the corresponding register
      while(numW>=i && numW > 1 && (REG_is_any_app_flags(reg)||(reg == REG_RFLAGS || reg == REG_FLAGS || reg == REG_EFLAGS||reg == REG_STACK_PTR))){
           randW = (randW + 1) % numW;
           i++; 
           if(numW > 1 && REG_valid(INS_RegW(ins, randW)))
               reg = INS_RegW(ins, randW);
      }
       // else
           // reg = INS_RegW(ins, 0); 
    if (!REG_valid(reg) || (REG_is_any_app_flags(reg)||(reg == REG_RFLAGS || reg == REG_FLAGS || reg == REG_EFLAGS || reg == REG_STACK_PTR))){
            LOG("!!!!!!!!!REGNOTVALID: inst " + INS_Disassemble(ins) + "!!!!!!!!!!!!!\n");
            return;
      }

    // Insert a call to inject a fault into the selected write register
    if (REG_is_xmm(reg)) {
       if(isDoublePrecission(ins){

          INS_InsertCall(
        ins, IPOINT_AFTER, (AFUNPTR)InjectBitFlip,
        IARG_INST_PTR, // Pass the instruction pointer
        IARG_UINT32, randW, // Pass the register index
        IARG_UINT32, reg, // Pass the register identifier
        IARG_CONTEXT, // Pass the full execution context
        IARG_END
    );     



       }
       if(isSinglePrecission(ins){

       }
       if(isVectorDoublePrecission(ins){

       }
       if(isVectorSinglePrecission(ins){

       }      
    }
    INS_InsertCall(
        ins, IPOINT_AFTER, (AFUNPTR)InjectBitFlip,
        IARG_INST_PTR, // Pass the instruction pointer
        IARG_UINT32, randW, // Pass the register index
        IARG_UINT32, reg, // Pass the register identifier
        IARG_CONTEXT, // Pass the full execution context
        IARG_END
    );
}

// Function to execute when the program ends
VOID Fini(INT32 code, VOID *v) {
    LOGOUT << "Finished injection tool!" << std::endl; // Indicate tool termination
}

int main(int argc, char *argv[]) {
    PIN_InitSymbols(); // Initialize Pin's symbol manager

    if (PIN_Init(argc, argv)) { // Initialize Pin with the given arguments
        std::cerr << "This Pintool does fault injection!" << std::endl;
        return 1; // Exit if initialization fails
    }

    // Open the results file for writing
    injection_commands.open("injection_results.txt", std::ios::out | std::ios::trunc);
    if (!injection_commands.is_open()) {
        std::cerr << "Error opening results file!" << std::endl;
        return 1;
    }

    INS_AddInstrumentFunction(InstructionInstrumentation, 0); // Register the instrumentation function
    PIN_AddFiniFunction(Fini, 0); // Register the finalization function

    PIN_StartProgram(); // Start the target program execution
    return 0; // Should never reach here
}
